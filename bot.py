import os
import re
import time
import json
import uuid
import logging
import asyncio
import traceback
import aiohttp
import urllib.parse
from typing import Dict, List, Union, Optional, Any, Tuple
from datetime import datetime

from aiogram import Bot, Dispatcher, Router, F
from aiogram.client.session.aiohttp import AiohttpSession
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import (
    Message, CallbackQuery, PhotoSize, InlineKeyboardMarkup, 
    InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton, 
    ReplyKeyboardRemove, InputFile, FSInputFile
)
from aiogram.filters import Command, StateFilter
from aiogram.utils.formatting import Text, Bold

from config import BOT_TOKEN, TEMP_DIR, MEDIA_DIR
from ai_service import AIService
from file_storage import FileStorage
from keyboards import (
    main_menu_keyboard, plant_menu_keyboard, vitamin_menu_keyboard,
    vitamins_keyboard, create_plant_action_keyboard, get_back_keyboard,
    create_search_result_keyboard, create_plant_problem_keyboard,
    create_youtube_keyboard
)
from utils import (
    download_image, format_plant_info, format_vitamin_info,
    log_user_action, format_ai_response, rate_limit
)

# Enable logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', 
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# Conversation states
FEEDBACK = 0
WAITING_FOR_GENERAL_QUESTION = 1
WAITING_FOR_VITAMIN_QUERY = 2
WAITING_FOR_PLANT_IMAGE = 3
WAITING_FOR_PROBLEM_DESCRIPTION = 4
WAITING_FOR_KNOWLEDGE_UPDATE_TOPIC = 5

# Initialize file storage
file_storage = FileStorage()

# Initialize AI service
ai_service = AIService()

def escape_markdown(text, version=1):
    """
    Helper function to escape telegram markup symbols.
    
    Args:
        text (str): The text to escape.
        version (int): The version of Telegram's Markdown parser to use
                      (1 for MarkdownV1, 2 for MarkdownV2)
    
    Returns:
        str: The escaped text.
    """
    if version == 1:
        escape_chars = r'_*`['
    else:  # For MarkdownV2
        escape_chars = r'_*[]()~`>#+-=|{}.!'
    
    return re.sub(f'([{re.escape(escape_chars)}])', r'\\\1', text)

async def start(update: Message, context: FSMContext) -> None:
    """Send a message when the command /start is issued."""
    user = update.from_user
    
    # Create user in database if doesn't exist
    if user.username:
        username = user.username
    else:
        username = f"{user.first_name} {user.last_name if user.last_name else ''}"
    
    file_storage.register_user(user.id, username, user.first_name)
    
    welcome_message = (
        f"üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {user.first_name}!\n\n"
        f"–Ø *PLEXY* - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π –±–æ—Ç, —Å–æ–∑–¥–∞–Ω–Ω—ã–π *SAMGA_NIS*.\n\n"
        f"–Ø –º–æ–≥—É:\n"
        f"üåø –û–ø—Ä–µ–¥–µ–ª—è—Ç—å —Ä–∞—Å—Ç–µ–Ω–∏—è –ø–æ —Ñ–æ—Ç–æ\n"
        f"üíä –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏—Ç–∞–º–∏–Ω–∞—Ö –∏ –º–∏–∫—Ä–æ—ç–ª–µ–º–µ–Ω—Ç–∞—Ö\n"
        f"‚ùì –û—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã —Å –ø–æ–º–æ—â—å—é –ò–ò\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –≤–∞—Å –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥."
    )
    
    # Track user interaction
    file_storage.update_user_interaction(user.id, "start")
    
    await update.answer(
        escape_markdown(welcome_message, 2),
        reply_markup=main_menu_keyboard()
    )


async def help_command(update: Message, context: FSMContext) -> None:
    """Send a message when the command /help is issued."""
    help_text = (
        "*PLEXY* - –í–∞—à –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π –±–æ—Ç –æ—Ç *SAMGA_NIS*\n\n"
        "*–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n"
        "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
        "/plants - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–∞—Å—Ç–µ–Ω–∏—è—Ö\n"
        "/vitamins - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∏—Ç–∞–º–∏–Ω–∞—Ö\n"
        "/ai - –ò–ò-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç\n"
        "/feedback - –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤\n\n"
        
        "*–§—É–Ω–∫—Ü–∏–∏:*\n"
        "üåø *–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–∞—Å—Ç–µ–Ω–∏–π:* –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –ª—é–±–æ–≥–æ —Ä–∞—Å—Ç–µ–Ω–∏—è, –∏ —è –æ–ø—Ä–µ–¥–µ–ª—é –µ–≥–æ –≤–∏–¥ –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–µ–º\n"
        "üíä *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∏—Ç–∞–º–∏–Ω–∞—Ö:* –ø–æ–ª—É—á–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏—Ç–∞–º–∏–Ω–∞—Ö, –º–∏–∫—Ä–æ—ç–ª–µ–º–µ–Ω—Ç–∞—Ö –∏ –∏—Ö –ø–æ–ª—å–∑–µ\n"
        "‚ùì *–ò–ò-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç:* –∑–∞–¥–∞–π—Ç–µ –º–Ω–µ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –Ω–∞ –Ω–µ–≥–æ –æ—Ç–≤–µ—Ç–∏—Ç—å\n\n"
        
        "–ß—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏–∑ –ª—é–±–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞, –Ω–∞–∂–º–∏—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É –≤ –º–µ–Ω—é."
    )
    
    # Track user interaction
    user_id = update.from_user.id
    file_storage.update_user_interaction(user_id, "help")
    
    await update.answer(
        escape_markdown(help_text, 2),
        reply_markup=main_menu_keyboard()
    )


async def handle_text_message(update: Message, context: FSMContext) -> None:
    """Handler for text messages"""
    text = update.text
    user_id = update.from_user.id
    
    # Check if the message is a menu button press
    if text == "üçè –í–∏—Ç–∞–º–∏–Ω—ã –∏ –º–∏–Ω–µ—Ä–∞–ª—ã":
        return await show_vitamins_menu(update, context)
    elif text == "üå± –£—Ö–æ–¥ –∑–∞ —Ä–∞—Å—Ç–µ–Ω–∏—è–º–∏":
        return await show_plants_menu(update, context)
    elif text == "ü§ñ AI –ö–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç":
        return await show_ai_menu(update, context)
    elif text == "‚ùì FAQ":
        return await show_faq(update, context)
    elif text == "üìù –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å":
        return await start_feedback(update, context)
    elif text == "üîç –ü—Ä–æ–±–ª–µ–º—ã –∏ —Ä–µ—à–µ–Ω–∏—è":
        return await show_problems_menu(update, context)
    
    # Check if in conversation state
    if context.get('state') == WAITING_FOR_GENERAL_QUESTION:
        await handle_ai_general_question(update, context, text)
        return
    elif context.get('state') == WAITING_FOR_VITAMIN_QUERY:
        await handle_ai_vitamin_recommendation(update, context, text)
        return
    elif context.get('state') == WAITING_FOR_PROBLEM_DESCRIPTION:
        await handle_problem_description(update, context, text)
        return
    
    # Check if it seems like an AI query
    if is_ai_query(text) or is_health_query(text):
        await handle_ai_general_question(update, context, text)
        return
    
    # Otherwise, process as a regular search query
    if is_vitamin_query(text):
        # Extract possible vitamin name
        vitamin_pattern = r"–≤–∏—Ç–∞–º–∏–Ω\s+([a-zA-Z–∞-—è–ê-–Ø\d]+)"
        match = re.search(vitamin_pattern, text.lower())
        
        if match:
            vitamin_name = match.group(1)
            vitamin = file_storage.get_vitamin_by_name(f"–í–∏—Ç–∞–º–∏–Ω {vitamin_name}")
            
            if vitamin:
                await update.answer(
                    format_vitamin_info(vitamin, detailed=True),
                    parse_mode='MarkdownV2'
                )
                file_storage.update_user_interaction(user_id, "vitamins")
                return
        
        # If no exact match, try search
        results = file_storage.search_vitamins(text)
        
        if results:
            if len(results) == 1:
                # If only one result, show detailed info
                await update.answer(
                    format_vitamin_info(results[0], detailed=True),
                    parse_mode='MarkdownV2'
                )
            else:
                # If multiple results, show list
                reply = "–ù–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π:\n\n"
                for i, result in enumerate(results[:5], 1):
                    reply += f"{i}. {result['name']}\n"
                reply += "\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –≤–∏—Ç–∞–º–∏–Ω –∏–ª–∏ –º–∏–Ω–µ—Ä–∞–ª –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏."
                await update.answer(reply)
            
            file_storage.update_user_interaction(user_id, "vitamins")
            return
    
    elif is_plant_query(text):
        # Try to find relevant plant care tip
        waste_types = ["—è–∏—á–Ω–∞—è —Å–∫–æ—Ä–ª—É–ø–∞", "–±–∞–Ω–∞–Ω–æ–≤–∞—è –∫–æ–∂—É—Ä–∞", "–∫–æ—Ñ–µ–π–Ω–∞—è –≥—É—â–∞", "—á–∞–π–Ω–∞—è –∑–∞–≤–∞—Ä–∫–∞"]
        
        for waste in waste_types:
            if waste in text.lower():
                plant_tip = file_storage.get_plant_tip_by_waste(waste)
                if plant_tip:
                    await update.answer(
                        format_plant_tip(plant_tip, detailed=True),
                        parse_mode='MarkdownV2'
                    )
                    file_storage.update_user_interaction(user_id, "plants")
                    return
        
        # If no exact match, try search
        results = file_storage.search_plant_tips(text)
        
        if results:
            if len(results) == 1:
                # If only one result, show detailed info
                await update.answer(
                    format_plant_tip(results[0], detailed=True),
                    parse_mode='MarkdownV2'
                )
            else:
                # If multiple results, show list
                reply = "–ù–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ–≤–µ—Ç–æ–≤ –ø–æ —É—Ö–æ–¥—É –∑–∞ —Ä–∞—Å—Ç–µ–Ω–∏—è–º–∏:\n\n"
                for i, result in enumerate(results[:5], 1):
                    reply += f"{i}. {result['waste_type']}\n"
                reply += "\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ç–∏–ø –æ—Ç—Ö–æ–¥–æ–≤ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏."
                await update.answer(reply)
            
            file_storage.update_user_interaction(user_id, "plants")
            return
    
    # If we got here, use AI to attempt to answer the question
    await handle_ai_general_question(update, context, text)


async def show_vitamins_menu(update: Message, context: FSMContext) -> None:
    """Show vitamins menu"""
    if update.callback:
        await update.callback.answer()
        await update.callback.edit_message_text(
            "üçè *–í–∏—Ç–∞–º–∏–Ω—ã –∏ –º–∏–Ω–µ—Ä–∞–ª—ã*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å –≤–∏—Ç–∞–º–∏–Ω –∏–ª–∏ –º–∏–Ω–µ—Ä–∞–ª:",
            reply_markup=vitamin_menu_keyboard(),
            parse_mode='MarkdownV2'
        )
    else:
        await update.answer(
            "üçè *–í–∏—Ç–∞–º–∏–Ω—ã –∏ –º–∏–Ω–µ—Ä–∞–ª—ã*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å –≤–∏—Ç–∞–º–∏–Ω –∏–ª–∏ –º–∏–Ω–µ—Ä–∞–ª:",
            reply_markup=vitamin_menu_keyboard(),
            parse_mode='MarkdownV2'
        )
    
    user_id = update.from_user.id
    file_storage.update_user_interaction(user_id, "vitamins")


async def show_plants_menu(update: Message, context: FSMContext) -> None:
    """Show plants menu"""
    if update.callback:
        await update.callback.answer()
        await update.callback.edit_message_text(
            "üå± *–£—Ö–æ–¥ –∑–∞ —Ä–∞—Å—Ç–µ–Ω–∏—è–º–∏*\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –±—ã—Ç–æ–≤—ã—Ö –æ—Ç—Ö–æ–¥–æ–≤ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:",
            reply_markup=plant_menu_keyboard(),
            parse_mode='MarkdownV2'
        )
    else:
        await update.answer(
            "üå± *–£—Ö–æ–¥ –∑–∞ —Ä–∞—Å—Ç–µ–Ω–∏—è–º–∏*\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –±—ã—Ç–æ–≤—ã—Ö –æ—Ç—Ö–æ–¥–æ–≤ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:",
            reply_markup=plant_menu_keyboard(),
            parse_mode='MarkdownV2'
        )
    
    user_id = update.from_user.id
    file_storage.update_user_interaction(user_id, "plants")


async def show_ai_menu(update: Message, context: FSMContext) -> None:
    """Show the AI menu"""
    user_id = update.from_user.id
    
    # Track user interaction
    file_storage.update_user_interaction(user_id, "ai_menu")
    
    if update.callback:
        await update.callback.answer()
        await update.callback.edit_message_text(
            "ü§ñ *PLEXY - –í–∞—à –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç*\n\n–ö–∞–∫ —è –º–æ–≥—É –≤–∞–º –ø–æ–º–æ—á—å —Å–µ–≥–æ–¥–Ω—è?",
            parse_mode='MarkdownV2',
            reply_markup=ai_menu_keyboard()
        )
    else:
        await update.answer(
            "ü§ñ *PLEXY - –í–∞—à –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç*\n\n–ö–∞–∫ —è –º–æ–≥—É –≤–∞–º –ø–æ–º–æ—á—å —Å–µ–≥–æ–¥–Ω—è?",
            parse_mode='MarkdownV2',
            reply_markup=ai_menu_keyboard()
        )


async def show_faq(update: Message, context: FSMContext) -> None:
    """Show FAQ menu"""
    if update.callback:
        await update.callback.answer()
        await update.callback.edit_message_text(
            "‚ùì *–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å —Ä–∞–∑–¥–µ–ª:",
            reply_markup=faq_keyboard(),
            parse_mode='MarkdownV2'
        )
    else:
        await update.answer(
            "‚ùì *–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å —Ä–∞–∑–¥–µ–ª:",
            reply_markup=faq_keyboard(),
            parse_mode='MarkdownV2'
        )
    
    user_id = update.from_user.id
    file_storage.update_user_interaction(user_id, "faq")


async def start_feedback(update: Message, context: FSMContext) -> int:
    """Start feedback conversation"""
    if update.callback:
        await update.callback.answer()
        await update.callback.edit_message_text(
            "üìù *–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å*\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ, –∑–∞–º–µ—á–∞–Ω–∏–µ –∏–ª–∏ –ø–æ–∂–µ–ª–∞–Ω–∏–µ. "
            "–≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –Ω–∞–º —É–ª—É—á—à–∏—Ç—å –±–æ—Ç–∞.\n\n"
            "–ß—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel",
            parse_mode='MarkdownV2'
        )
    else:
        await update.answer(
            "üìù *–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å*\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ, –∑–∞–º–µ—á–∞–Ω–∏–µ –∏–ª–∏ –ø–æ–∂–µ–ª–∞–Ω–∏–µ. "
            "–≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –Ω–∞–º —É–ª—É—á—à–∏—Ç—å –±–æ—Ç–∞.\n\n"
            "–ß—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel",
            parse_mode='MarkdownV2'
        )
    
    return FEEDBACK


async def handle_feedback(update: Message, context: FSMContext) -> int:
    """Process the feedback"""
    user_id = update.from_user.id
    feedback_text = update.text
    
    # Save feedback to database
    file_storage.add_feedback(user_id, feedback_text)
    
    await update.answer(
        "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤! –ú—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É—á—Ç–µ–º –µ–≥–æ –ø—Ä–∏ —É–ª—É—á—à–µ–Ω–∏–∏ –±–æ—Ç–∞.",
        reply_markup=main_menu_keyboard()
    )
    
    return ConversationHandler.END


async def cancel_feedback(update: Message, context: FSMContext) -> int:
    """Cancel feedback conversation"""
    await update.answer(
        "–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–∑—ã–≤–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.",
        reply_markup=main_menu_keyboard()
    )
    
    return ConversationHandler.END


async def cancel_operation(update: Message, context: FSMContext) -> None:
    """Cancel any ongoing operation"""
    query = update.callback
    await query.answer()
    
    # Clear state
    if 'state' in context.get():
        del context['state']
    
    await query.edit_message_text(
        "–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞. –ß–µ–º –µ—â–µ —è –º–æ–≥—É –ø–æ–º–æ—á—å?",
        reply_markup=None
    )


async def start_ai_general_question(update: Message, context: FSMContext) -> int:
    """Start AI general question conversation"""
    context['state'] = WAITING_FOR_GENERAL_QUESTION
    
    if update.callback:
        await update.callback.answer()
        await update.callback.edit_message_text(
            "üí¨ *–ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å PLEXY*\n\n"
            "–ó–∞–¥–∞–π—Ç–µ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å –æ –≤–∏—Ç–∞–º–∏–Ω–∞—Ö, —Ä–∞—Å—Ç–µ–Ω–∏—è—Ö –∏–ª–∏ –∑–¥–æ—Ä–æ–≤—å–µ, "
            "–∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –¥–∞—Ç—å —Ç–æ—á–Ω—ã–π –∏ –ø–æ–ª–µ–∑–Ω—ã–π –æ—Ç–≤–µ—Ç.\n\n"
            "–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å:",
            parse_mode='MarkdownV2',
            reply_markup=cancel_keyboard()
        )
    else:
        await update.answer(
            "üí¨ *–ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å PLEXY*\n\n"
            "–ó–∞–¥–∞–π—Ç–µ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å –æ –≤–∏—Ç–∞–º–∏–Ω–∞—Ö, —Ä–∞—Å—Ç–µ–Ω–∏—è—Ö –∏–ª–∏ –∑–¥–æ—Ä–æ–≤—å–µ, "
            "–∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –¥–∞—Ç—å —Ç–æ—á–Ω—ã–π –∏ –ø–æ–ª–µ–∑–Ω—ã–π –æ—Ç–≤–µ—Ç.\n\n"
            "–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å:",
            parse_mode='MarkdownV2',
            reply_markup=cancel_keyboard()
        )
    
    return WAITING_FOR_GENERAL_QUESTION


async def handle_ai_general_question(update: Message, context: FSMContext, question=None) -> None:
    """Handle general AI questions"""
    user_id = update.from_user.id
    user_question = question or update.text
    
    # Track user interaction
    file_storage.update_user_interaction(user_id, "ai_question", user_question)
    
    # Send "typing" indicator
    await context.bot.send_chat_action(chat_id=update.chat.id, action='typing')
    
    try:
        # Get response from AI service
        response = await ai_service.get_ai_response(user_question)
        
        # Clean any markdown to ensure proper formatting
        response = clean_markdown(response)
        
        # Send the response
        await update.answer(
            response,
            reply_markup=ai_menu_keyboard()
        )
    except Exception as e:
        logging.error(f"Error getting AI response: {str(e)}")
        await update.answer(
            "‚ùå –ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ.",
            reply_markup=ai_menu_keyboard()
        )


async def start_ai_vitamin_recommendation(update: Message, context: FSMContext) -> int:
    """Start AI vitamin recommendation conversation"""
    context['state'] = WAITING_FOR_VITAMIN_QUERY
    
    if update.callback:
        await update.callback.answer()
        await update.callback.edit_message_text(
            "üíä *–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –≤–∏—Ç–∞–º–∏–Ω–æ–≤*\n\n"
            "–û–ø–∏—à–∏—Ç–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å, —Å–∏–º–ø—Ç–æ–º—ã –∏–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –∏ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç "
            "–ø—Ä–µ–¥–ª–æ–∂–∏—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –≤–∏—Ç–∞–º–∏–Ω—ã –∏ –º–∏–Ω–µ—Ä–∞–ª—ã.\n\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: '–ö–∞–∫–∏–µ –≤–∏—Ç–∞–º–∏–Ω—ã –Ω—É–∂–Ω—ã –ø—Ä–∏ –∞–≤–∏—Ç–∞–º–∏–Ω–æ–∑–µ' –∏–ª–∏ '–ß—Ç–æ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è –∏–º–º—É–Ω–∏—Ç–µ—Ç–∞'.\n\n"
            "–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å:",
            parse_mode='MarkdownV2',
            reply_markup=cancel_keyboard()
        )
    else:
        await update.answer(
            "üíä *–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –≤–∏—Ç–∞–º–∏–Ω–æ–≤*\n\n"
            "–û–ø–∏—à–∏—Ç–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å, —Å–∏–º–ø—Ç–æ–º—ã –∏–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –∏ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç "
            "–ø—Ä–µ–¥–ª–æ–∂–∏—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –≤–∏—Ç–∞–º–∏–Ω—ã –∏ –º–∏–Ω–µ—Ä–∞–ª—ã.\n\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: '–ö–∞–∫–∏–µ –≤–∏—Ç–∞–º–∏–Ω—ã –Ω—É–∂–Ω—ã –ø—Ä–∏ –∞–≤–∏—Ç–∞–º–∏–Ω–æ–∑–µ' –∏–ª–∏ '–ß—Ç–æ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è –∏–º–º—É–Ω–∏—Ç–µ—Ç–∞'.\n\n"
            "–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å:",
            parse_mode='MarkdownV2',
            reply_markup=cancel_keyboard()
        )
    
    return WAITING_FOR_VITAMIN_QUERY


async def handle_ai_vitamin_recommendation(update: Message, context: FSMContext, query=None) -> None:
    """Handle AI vitamin recommendation"""
    if not query:
        query = update.text
    
    # Clear state
    if 'state' in context.get():
        del context['state']
    
    # Send typing action
    await context.bot.send_chat_action(
        chat_id=update.chat.id,
        action='typing'
    )
    
    # Get response from AI
    response = await ai_service.recommend_vitamins(query)
    
    # Clean response to ensure proper formatting
    response = clean_markdown(response)
    
    # Send response
    await context.bot.send_message(
        chat_id=update.chat.id,
        text=response,
        parse_mode='MarkdownV2'
    )


async def start_ai_plant_analysis(update: Message, context: FSMContext) -> int:
    """Start AI plant analysis conversation"""
    context['state'] = WAITING_FOR_PLANT_IMAGE
    
    if update.callback:
        await update.callback.answer()
        await update.callback.edit_message_text(
            "üì∑ *–ê–Ω–∞–ª–∏–∑ —Ä–∞—Å—Ç–µ–Ω–∏—è*\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —Ä–∞—Å—Ç–µ–Ω–∏—è, –∏ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç:"
            "\n- –û–ø—Ä–µ–¥–µ–ª–∏—Ç –≤–∏–¥ —Ä–∞—Å—Ç–µ–Ω–∏—è"
            "\n- –û—Ü–µ–Ω–∏—Ç –µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ"
            "\n- –î–∞—Å—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É—Ö–æ–¥—É"
            "\n- –†–∞—Å—Å–∫–∞–∂–µ—Ç –æ –ø–ª—é—Å–∞—Ö –∏ –º–∏–Ω—É—Å–∞—Ö –µ–≥–æ –≤—ã—Ä–∞—â–∏–≤–∞–Ω–∏—è\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é:",
            parse_mode='MarkdownV2',
            reply_markup=cancel_keyboard()
        )
    else:
        await update.answer(
            "üì∑ *–ê–Ω–∞–ª–∏–∑ —Ä–∞—Å—Ç–µ–Ω–∏—è*\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —Ä–∞—Å—Ç–µ–Ω–∏—è, –∏ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç:"
            "\n- –û–ø—Ä–µ–¥–µ–ª–∏—Ç –≤–∏–¥ —Ä–∞—Å—Ç–µ–Ω–∏—è"
            "\n- –û—Ü–µ–Ω–∏—Ç –µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ"
            "\n- –î–∞—Å—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É—Ö–æ–¥—É"
            "\n- –†–∞—Å—Å–∫–∞–∂–µ—Ç –æ –ø–ª—é—Å–∞—Ö –∏ –º–∏–Ω—É—Å–∞—Ö –µ–≥–æ –≤—ã—Ä–∞—â–∏–≤–∞–Ω–∏—è\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é:",
            parse_mode='MarkdownV2',
            reply_markup=cancel_keyboard()
        )
    
    return WAITING_FOR_PLANT_IMAGE


async def handle_photo(update: Message, context: FSMContext) -> None:
    """Handle user photos"""
    user_id = update.from_user.id
    
    # Get best quality photo
    photo_file = await update.photo[-1].get_file()
    
    # Create temp directory if it doesn't exist
    if not os.path.exists("temp"):
        os.makedirs("temp")
    
    # Define file paths
    file_path = f"temp/photo_{user_id}.jpg"
    
    # Download photo
    await photo_file.download_to_drive(file_path)
    
    # Track user interaction
    file_storage.update_user_interaction(user_id, "photo_recognition")
    
    # Always process as plant identification
    processing_message = await update.answer("üîç PLEXY –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤–∞—à—É —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —Ä–∞—Å—Ç–µ–Ω–∏—è...")
    
    try:
        # Get plant recognition from the service
        plant_info = await ai_service.recognize_plant(file_path)
        
        if not plant_info or "error" in plant_info:
            # If recognition failed
            await processing_message.edit_text(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–∞—Å—Ç–µ–Ω–∏–µ –Ω–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ä–∞—Å—Ç–µ–Ω–∏–µ —Ö–æ—Ä–æ—à–æ –≤–∏–¥–Ω–æ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                reply_markup=plant_menu_keyboard()
            )
            return
        
        # Extract plant details
        plant_name = plant_info.get("name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Ä–∞—Å—Ç–µ–Ω–∏–µ")
        scientific_name = plant_info.get("scientific_name", "–ù–∞—É—á–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        
        # Clean text to ensure proper formatting
        description = clean_markdown(plant_info.get("description", ""))
        care_tips = clean_markdown(plant_info.get("care_tips", ""))
        
        # Check if we have specific details about the plant
        has_specific_info = (
            plant_name != "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Ä–∞—Å—Ç–µ–Ω–∏–µ" and 
            scientific_name != "–ù–∞—É—á–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ" and
            description and care_tips
        )
        
        # Format information for display
        plant_details = []
        
        # Always show name and scientific name first
        plant_details.append(f"*–ù–∞–∑–≤–∞–Ω–∏–µ:* {plant_name}")
        plant_details.append(f"*–ù–∞—É—á–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:* {scientific_name}")
        
        # Add state information if available
        if "state" in plant_info and plant_info["state"] and plant_info["state"] != "–°–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ":
            state_info = clean_markdown(plant_info["state"])
            plant_details.append(f"\n*–°–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞—Å—Ç–µ–Ω–∏—è:*\n{state_info}")
        
        # Add description
        if description:
            # Check for redundancy - don't add if it's too similar to state
            if not "state" in plant_info or description != plant_info["state"]:
                plant_details.append(f"\n*–û–ø–∏—Å–∞–Ω–∏–µ:*\n{description}")
        
        # Add care tips with good formatting
        if care_tips:
            plant_details.append(f"\n*–°–æ–≤–µ—Ç—ã –ø–æ —É—Ö–æ–¥—É:*\n{care_tips}")
        
        # Add light requirements if available
        if "light" in plant_info and plant_info["light"] and plant_info["light"] != "–ù–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏":
            light_info = clean_markdown(plant_info["light"])
            plant_details.append(f"\n*–û—Å–≤–µ—â–µ–Ω–∏–µ:*\n{light_info}")
        
        # Add watering info if available
        if "water" in plant_info and plant_info["water"] and plant_info["water"] != "–ù–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏":
            water_info = clean_markdown(plant_info["water"])
            plant_details.append(f"\n*–ü–æ–ª–∏–≤:*\n{water_info}")
        
        # Add temperature info if available
        if "temperature" in plant_info and plant_info["temperature"] and plant_info["temperature"] != "–ù–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏":
            temp_info = clean_markdown(plant_info["temperature"])
            plant_details.append(f"\n*–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞:*\n{temp_info}")
        
        # Add soil info if available
        if "soil" in plant_info and plant_info["soil"] and plant_info["soil"] != "–ù–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏":
            soil_info = clean_markdown(plant_info["soil"])
            plant_details.append(f"\n*–ü–æ—á–≤–∞:*\n{soil_info}")
        
        # Add common problems if available
        if "problems" in plant_info and plant_info["problems"] and plant_info["problems"] != "–ù–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏":
            problems_info = clean_markdown(plant_info["problems"])
            plant_details.append(f"\n*–†–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã:*\n{problems_info}")
        
        # Format the final plant information text
        if has_specific_info:
            header = "üåø *–†–∞—Å—Ç–µ–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–æ!*\n\n"
        else:
            header = "üåø *–†–∞—Å—Ç–µ–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–æ!*\n\n"
            
            if plant_name == "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Ä–∞—Å—Ç–µ–Ω–∏–µ":
                header = "üåø *–†–∞—Å—Ç–µ–Ω–∏–µ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ*\n\n–ù–µ —É–¥–∞–ª–æ—Å—å —Ç–æ—á–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–∏–¥ —Ä–∞—Å—Ç–µ–Ω–∏—è, –Ω–æ –≤–æ—Ç –æ–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:\n\n"
        
        plant_info_text = header + "\n".join(plant_details)
        
        # Make sure the message isn't too long for Telegram
        if len(plant_info_text) > 4000:
            plant_info_text = plant_info_text[:3900] + "\n\n... (—Ç–µ–∫—Å—Ç —Å–æ–∫—Ä–∞—â–µ–Ω –∏–∑-–∑–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π Telegram)"
        
        # Delete processing message and send the result
        await processing_message.delete()
        await update.answer(
            plant_info_text,
            parse_mode='MarkdownV2',
            reply_markup=create_plant_action_keyboard(plant_name) if plant_name != "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Ä–∞—Å—Ç–µ–Ω–∏–µ" else plant_menu_keyboard()
        )
        
    except Exception as e:
        logging.error(f"Error in plant recognition: {str(e)}")
        await processing_message.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –ø–æ–∑–∂–µ.",
            reply_markup=main_menu_keyboard()
        )
    
    # Clean up - remove temporary file
    if os.path.exists(file_path):
        os.remove(file_path)


async def show_problems_menu(update: Message, context: FSMContext) -> None:
    """Show problems and solutions menu"""
    if update.callback:
        await update.callback.answer()
        await update.callback.edit_message_text(
            "üîç *–ü—Ä–æ–±–ª–µ–º—ã –∏ —Ä–µ—à–µ–Ω–∏—è*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø—Ä–æ–±–ª–µ–º –∏–ª–∏ –æ–ø–∏—à–∏—Ç–µ —Å–≤–æ—é –ø—Ä–æ–±–ª–µ–º—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π:",
            reply_markup=problems_menu_keyboard(),
            parse_mode='MarkdownV2'
        )
    else:
        await update.answer(
            "üîç *–ü—Ä–æ–±–ª–µ–º—ã –∏ —Ä–µ—à–µ–Ω–∏—è*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø—Ä–æ–±–ª–µ–º –∏–ª–∏ –æ–ø–∏—à–∏—Ç–µ —Å–≤–æ—é –ø—Ä–æ–±–ª–µ–º—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π:",
            reply_markup=problems_menu_keyboard(),
            parse_mode='MarkdownV2'
        )
    
    user_id = update.from_user.id
    file_storage.update_user_interaction(user_id, "problems_solutions")


async def handle_callback_query(update: CallbackQuery, context: FSMContext) -> None:
    """Handle callback queries from inline keyboards"""
    query = update.callback_query
    await query.answer()
    
    callback_data = query.data
    user_id = update.from_user.id
    
    # Cancel operation
    if callback_data == "cancel_operation":
        return await cancel_operation(update, context)
    
    # Main menu navigation
    if callback_data == "main_menu":
        await query.edit_message_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å —Ä–∞–∑–¥–µ–ª –∏–ª–∏ –∑–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å:",
            reply_markup=main_menu_keyboard()
        )
    
    # Handle feedback
    elif callback_data == "feedback":
        return await start_feedback(update, context)
    
    # Vitamins section
    elif callback_data == "vitamins_menu":
        await show_vitamins_menu(update, context)
    
    elif callback_data == "vitamins_all":
        vitamins = file_storage.get_all_vitamins()
        text = "*–°–ø–∏—Å–æ–∫ –≤–∏—Ç–∞–º–∏–Ω–æ–≤ –∏ –º–∏–Ω–µ—Ä–∞–ª–æ–≤:*\n\n"
        
        for vitamin in vitamins:
            text += f"‚Ä¢ {vitamin['name']}: {vitamin['short_description']}\n\n"
        
        await query.edit_message_text(
            text,
            parse_mode='MarkdownV2',
            reply_markup=get_back_keyboard("vitamins_menu")
        )
        file_storage.update_user_interaction(user_id, "vitamins")
    
    elif callback_data.startswith("vitamin_"):
        # Extract vitamin name
        name = "–í–∏—Ç–∞–º–∏–Ω " + callback_data[8:].upper()
        
        vitamin = file_storage.get_vitamin_by_name(name)
        
        if vitamin:
            await query.edit_message_text(
                format_vitamin_info(vitamin, detailed=True),
                parse_mode='MarkdownV2',
                reply_markup=get_back_keyboard("vitamins_menu")
            )
        else:
            await query.edit_message_text(
                f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ {name} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.",
                reply_markup=get_back_keyboard("vitamins_menu")
            )
        
        file_storage.update_user_interaction(user_id, "vitamins")
        
    elif callback_data.startswith("mineral_"):
        # Extract mineral name
        name = callback_data[8:].capitalize()
        
        vitamin = file_storage.get_vitamin_by_name(name)
        
        if vitamin:
            await query.edit_message_text(
                format_vitamin_info(vitamin, detailed=True),
                parse_mode='MarkdownV2',
                reply_markup=get_back_keyboard("vitamins_menu")
            )
        else:
            await query.edit_message_text(
                f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–∏–Ω–µ—Ä–∞–ª–µ {name} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.",
                reply_markup=get_back_keyboard("vitamins_menu")
            )
        
        file_storage.update_user_interaction(user_id, "vitamins")
    
    # Plants section
    elif callback_data == "plants_menu":
        await show_plants_menu(update, context)
    
    elif callback_data == "plants_all":
        plant_tips = file_storage.get_all_plant_tips()
        text = "*–°–ø–æ—Å–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±—ã—Ç–æ–≤—ã—Ö –æ—Ç—Ö–æ–¥–æ–≤ –¥–ª—è —Ä–∞—Å—Ç–µ–Ω–∏–π:*\n\n"
        
        for tip in plant_tips:
            text += f"‚Ä¢ {tip['waste_type']}: {tip['short_description']}\n\n"
        
        await query.edit_message_text(
            text,
            parse_mode='MarkdownV2',
            reply_markup=get_back_keyboard("plants_menu")
        )
        file_storage.update_user_interaction(user_id, "plants")
    
    # Handle plant-specific actions
    elif callback_data.startswith("plant_info_"):
        # Extract plant name from callback data
        plant_name = callback_data[11:]  # Remove "plant_info_" prefix
        
        # Try to get plant from database
        plant = file_storage.get_plant_by_name(plant_name)
        
        if plant:
            # Format plant information
            plant_text = f"üåø *{plant['name']}*\n\n"
            
            if 'scientific_name' in plant and plant['scientific_name']:
                plant_text += f"*–ù–∞—É—á–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:* {plant['scientific_name']}\n\n"
            
            if 'description' in plant and plant['description']:
                plant_text += f"*–û–ø–∏—Å–∞–Ω–∏–µ:*\n{plant['description']}\n\n"
            
            if 'care_tips' in plant and plant['care_tips']:
                plant_text += f"*–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É—Ö–æ–¥—É:*\n{plant['care_tips']}\n\n"
            
            if 'extra_data' in plant:
                extra = plant['extra_data']
                
                if 'light' in extra:
                    plant_text += f"*–û—Å–≤–µ—â–µ–Ω–∏–µ:*\n{extra['light']}\n\n"
                
                if 'watering' in extra:
                    plant_text += f"*–ü–æ–ª–∏–≤:*\n{extra['watering']}\n\n"
                
                if 'temperature' in extra:
                    plant_text += f"*–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞:*\n{extra['temperature']}\n\n"
                
                if 'soil' in extra:
                    plant_text += f"*–ü–æ—á–≤–∞:*\n{extra['soil']}\n\n"
            
            await query.edit_message_text(
                plant_text,
                parse_mode='MarkdownV2',
                reply_markup=create_plant_action_keyboard(plant_name)
            )
        else:
            # If plant not in database, use AI to get information
            prompt = f"–î–∞–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞—Å—Ç–µ–Ω–∏–∏ {plant_name}. –í–∫–ª—é—á–∏ –Ω–∞—É—á–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ, –æ–ø–∏—Å–∞–Ω–∏–µ, –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏."
            
            # Send typing action
            await context.bot.send_chat_action(chat_id=update.chat.id, action='typing')
            
            try:
                response = await ai_service.generate_response(prompt, max_tokens=800)
                response = clean_markdown(response)
                
                await query.edit_message_text(
                    f"üåø *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–∞—Å—Ç–µ–Ω–∏–∏*\n\n{response}",
                    parse_mode='MarkdownV2',
                    reply_markup=create_plant_action_keyboard(plant_name)
                )
            except Exception as e:
                logging.error(f"Error getting plant info: {e}")
                await query.edit_message_text(
                    f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞—Å—Ç–µ–Ω–∏–∏ {plant_name}.",
                    reply_markup=plant_menu_keyboard()
                )
        
        file_storage.update_user_interaction(user_id, "plant_info", plant_name)
    
    elif callback_data.startswith("plant_water_"):
        # Extract plant name from callback data
        plant_name = callback_data[12:]  # Remove "plant_water_" prefix
        
        # Try to get plant from database
        plant = file_storage.get_plant_by_name(plant_name)
        watering_info = None
        
        if plant and 'extra_data' in plant and 'watering' in plant['extra_data']:
            watering_info = plant['extra_data']['watering']
        
        if watering_info:
            await query.edit_message_text(
                f"üíß *–ü–æ–ª–∏–≤ –¥–ª—è {plant_name}*\n\n{watering_info}",
                parse_mode='MarkdownV2',
                reply_markup=create_plant_action_keyboard(plant_name)
            )
        else:
            # If watering info not in database, use AI to get information
            prompt = f"–ö–∞–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–æ–ª–∏–≤–∞—Ç—å —Ä–∞—Å—Ç–µ–Ω–∏–µ {plant_name}? –î–∞–π –ø–æ–¥—Ä–æ–±–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø–æ–ª–∏–≤—É."
            
            # Send typing action
            await context.bot.send_chat_action(chat_id=update.chat.id, action='typing')
            
            try:
                response = await ai_service.generate_response(prompt, max_tokens=500)
                response = clean_markdown(response)
                
                await query.edit_message_text(
                    f"üíß *–ü–æ–ª–∏–≤ –¥–ª—è {plant_name}*\n\n{response}",
                    parse_mode='MarkdownV2',
                    reply_markup=create_plant_action_keyboard(plant_name)
                )
            except Exception as e:
                logging.error(f"Error getting watering info: {e}")
                await query.edit_message_text(
                    f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª–∏–≤–µ –¥–ª—è {plant_name}.",
                    reply_markup=create_plant_action_keyboard(plant_name)
                )
        
        file_storage.update_user_interaction(user_id, "plant_water", plant_name)
    
    elif callback_data.startswith("plant_light_"):
        # Extract plant name from callback data
        plant_name = callback_data[12:]  # Remove "plant_light_" prefix
        
        # Try to get plant from database
        plant = file_storage.get_plant_by_name(plant_name)
        light_info = None
        
        if plant and 'extra_data' in plant and 'light' in plant['extra_data']:
            light_info = plant['extra_data']['light']
        
        if light_info:
            await query.edit_message_text(
                f"‚òÄÔ∏è *–û—Å–≤–µ—â–µ–Ω–∏–µ –¥–ª—è {plant_name}*\n\n{light_info}",
                parse_mode='MarkdownV2',
                reply_markup=create_plant_action_keyboard(plant_name)
            )
        else:
            # If light info not in database, use AI to get information
            prompt = f"–ö–∞–∫–æ–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–ª—è —Ä–∞—Å—Ç–µ–Ω–∏—è {plant_name}? –î–∞–π –ø–æ–¥—Ä–æ–±–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏."
            
            # Send typing action
            await context.bot.send_chat_action(chat_id=update.chat.id, action='typing')
            
            try:
                response = await ai_service.generate_response(prompt, max_tokens=500)
                response = clean_markdown(response)
                
                await query.edit_message_text(
                    f"‚òÄÔ∏è *–û—Å–≤–µ—â–µ–Ω–∏–µ –¥–ª—è {plant_name}*\n\n{response}",
                    parse_mode='MarkdownV2',
                    reply_markup=create_plant_action_keyboard(plant_name)
                )
            except Exception as e:
                logging.error(f"Error getting light info: {e}")
                await query.edit_message_text(
                    f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Å–≤–µ—â–µ–Ω–∏–∏ –¥–ª—è {plant_name}.",
                    reply_markup=create_plant_action_keyboard(plant_name)
                )
        
        file_storage.update_user_interaction(user_id, "plant_light", plant_name)
    
    elif callback_data.startswith("plant_temp_"):
        # Extract plant name from callback data
        plant_name = callback_data[11:]  # Remove "plant_temp_" prefix
        
        # Try to get plant from database
        plant = file_storage.get_plant_by_name(plant_name)
        temp_info = None
        
        if plant and 'extra_data' in plant and 'temperature' in plant['extra_data']:
            temp_info = plant['extra_data']['temperature']
        
        if temp_info:
            await query.edit_message_text(
                f"üå°Ô∏è *–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –¥–ª—è {plant_name}*\n\n{temp_info}",
                parse_mode='MarkdownV2',
                reply_markup=create_plant_action_keyboard(plant_name)
            )
        else:
            # If temperature info not in database, use AI to get information
            prompt = f"–ö–∞–∫–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–ª—è —Ä–∞—Å—Ç–µ–Ω–∏—è {plant_name}? –î–∞–π –ø–æ–¥—Ä–æ–±–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏."
            
            # Send typing action
            await context.bot.send_chat_action(chat_id=update.chat.id, action='typing')
            
            try:
                response = await ai_service.generate_response(prompt, max_tokens=500)
                response = clean_markdown(response)
                
                await query.edit_message_text(
                    f"üå°Ô∏è *–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –¥–ª—è {plant_name}*\n\n{response}",
                    parse_mode='MarkdownV2',
                    reply_markup=create_plant_action_keyboard(plant_name)
                )
            except Exception as e:
                logging.error(f"Error getting temperature info: {e}")
                await query.edit_message_text(
                    f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–µ –¥–ª—è {plant_name}.",
                    reply_markup=create_plant_action_keyboard(plant_name)
                )
        
        file_storage.update_user_interaction(user_id, "plant_temperature", plant_name)
    
    elif callback_data.startswith("plant_soil_"):
        # Extract plant name from callback data
        plant_name = callback_data[11:]  # Remove "plant_soil_" prefix
        
        # Try to get plant from database
        plant = file_storage.get_plant_by_name(plant_name)
        soil_info = None
        
        if plant and 'extra_data' in plant and 'soil' in plant['extra_data']:
            soil_info = plant['extra_data']['soil']
        
        if soil_info:
            await query.edit_message_text(
                f"üå± *–ü–æ—á–≤–∞ –¥–ª—è {plant_name}*\n\n{soil_info}",
                parse_mode='MarkdownV2',
                reply_markup=create_plant_action_keyboard(plant_name)
            )
        else:
            # If soil info not in database, use AI to get information
            prompt = f"–ö–∞–∫–∞—è –ø–æ—á–≤–∞ —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–ª—è —Ä–∞—Å—Ç–µ–Ω–∏—è {plant_name}? –î–∞–π –ø–æ–¥—Ä–æ–±–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏."
            
            # Send typing action
            await context.bot.send_chat_action(chat_id=update.chat.id, action='typing')
            
            try:
                response = await ai_service.generate_response(prompt, max_tokens=500)
                response = clean_markdown(response)
                
                await query.edit_message_text(
                    f"üå± *–ü–æ—á–≤–∞ –¥–ª—è {plant_name}*\n\n{response}",
                    parse_mode='MarkdownV2',
                    reply_markup=create_plant_action_keyboard(plant_name)
                )
            except Exception as e:
                logging.error(f"Error getting soil info: {e}")
                await query.edit_message_text(
                    f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—á–≤–µ –¥–ª—è {plant_name}.",
                    reply_markup=create_plant_action_keyboard(plant_name)
                )
        
        file_storage.update_user_interaction(user_id, "plant_soil", plant_name)
    
    elif callback_data.startswith("plant_problems_"):
        # Extract plant name from callback data
        plant_name = callback_data[15:]  # Remove "plant_problems_" prefix
        
        # Try to get plant from database
        plant = file_storage.get_plant_by_name(plant_name)
        problems_info = None
        
        if plant and 'extra_data' in plant and 'common_problems' in plant['extra_data']:
            problems_info = plant['extra_data']['common_problems']
        
        if problems_info:
            await query.edit_message_text(
                f"ü©∫ *–ü—Ä–æ–±–ª–µ–º—ã –∏ –±–æ–ª–µ–∑–Ω–∏ {plant_name}*\n\n{problems_info}",
                parse_mode='MarkdownV2',
                reply_markup=create_plant_problem_keyboard(plant_name)
            )
        else:
            # If problems info not in database, use AI to get information
            prompt = f"–ö–∞–∫–∏–µ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –∏ –±–æ–ª–µ–∑–Ω–∏ –±—ã–≤–∞—é—Ç —É —Ä–∞—Å—Ç–µ–Ω–∏—è {plant_name}? –î–∞–π –ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏ –º–µ—Ç–æ–¥—ã –ª–µ—á–µ–Ω–∏—è."
            
            # Send typing action
            await context.bot.send_chat_action(chat_id=update.chat.id, action='typing')
            
            try:
                response = await ai_service.generate_response(prompt, max_tokens=600)
                response = clean_markdown(response)
                
                await query.edit_message_text(
                    f"ü©∫ *–ü—Ä–æ–±–ª–µ–º—ã –∏ –±–æ–ª–µ–∑–Ω–∏ {plant_name}*\n\n{response}",
                    parse_mode='MarkdownV2',
                    reply_markup=create_plant_problem_keyboard(plant_name)
                )
            except Exception as e:
                logging.error(f"Error getting problems info: {e}")
                await query.edit_message_text(
                    f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–±–ª–µ–º–∞—Ö –¥–ª—è {plant_name}.",
                    reply_markup=create_plant_problem_keyboard(plant_name)
                )
        
        file_storage.update_user_interaction(user_id, "plant_problems", plant_name)
    
    elif callback_data.startswith("waste_"):
        waste_type = callback_data[6:].replace("_", " ")
        
        if waste_type == "eggshell":
            waste_type = "—è–∏—á–Ω–∞—è —Å–∫–æ—Ä–ª—É–ø–∞"
        elif waste_type == "banana":
            waste_type = "–±–∞–Ω–∞–Ω–æ–≤–∞—è –∫–æ–∂—É—Ä–∞"
        elif waste_type == "coffee":
            waste_type = "–∫–æ—Ñ–µ–π–Ω–∞—è –≥—É—â–∞"
        elif waste_type == "tea":
            waste_type = "—á–∞–π–Ω–∞—è –∑–∞–≤–∞—Ä–∫–∞"
        
        plant_tip = file_storage.get_plant_tip_by_waste(waste_type)
        
        if plant_tip:
            await query.edit_message_text(
                format_plant_tip(plant_tip, detailed=True),
                parse_mode='MarkdownV2',
                reply_markup=get_back_keyboard("plants_menu")
            )
        else:
            await query.edit_message_text(
                f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ {waste_type} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.",
                reply_markup=get_back_keyboard("plants_menu")
            )
        
        file_storage.update_user_interaction(user_id, "plants")
    
    # AI Consultant section
    elif callback_data == "ai_consultant_menu":
        await show_ai_menu(update, context)
    
    elif callback_data == "ai_general_question":
        return await start_ai_general_question(update, context)
    
    elif callback_data == "ai_vitamin_recommend":
        return await start_ai_vitamin_recommendation(update, context)
    
    elif callback_data == "ai_plant_analysis":
        return await start_ai_plant_analysis(update, context)
    
    # FAQ section
    elif callback_data.startswith("faq_"):
        faq_id = callback_data[4:]
        faq_text = format_faq(faq_id)
        
        if faq_text:
            await query.edit_message_text(
                faq_text,
                parse_mode='MarkdownV2',
                reply_markup=get_back_keyboard("faq_menu")
            )
        else:
            await query.edit_message_text(
                "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.",
                reply_markup=get_back_keyboard("faq_menu")
            )
        
        file_storage.update_user_interaction(user_id, "faq")
        
    elif callback_data == "faq_menu":
        await show_faq(update, context)
    
    # Problems section
    elif callback_data == "problems_menu":
        await show_problems_menu(update, context)
    elif callback_data in ["vitamin_problems", "plant_problems"]:
        context['problem_type'] = "vitamin" if callback_data == "vitamin_problems" else "plant"
        return await start_problem_description(update, context)


async def start_problem_description(update: Message, context: FSMContext) -> int:
    """Start problem description conversation"""
    problem_type = context.get('problem_type', 'general')
    context['state'] = WAITING_FOR_PROBLEM_DESCRIPTION
    
    if update.callback:
        await update.callback.answer()
        if problem_type == "vitamin":
            message = (
                "üîç *–ü—Ä–æ–±–ª–µ–º—ã —Å –≤–∏—Ç–∞–º–∏–Ω–∞–º–∏*\n\n"
                "–û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É, —Å–≤—è–∑–∞–Ω–Ω—É—é —Å –≤–∏—Ç–∞–º–∏–Ω–∞–º–∏ –∏–ª–∏ –º–∏–Ω–µ—Ä–∞–ª–∞–º–∏. –ù–∞–ø—Ä–∏–º–µ—Ä:\n"
                "- –ü–æ–±–æ—á–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã –æ—Ç –ø—Ä–∏–µ–º–∞ –≤–∏—Ç–∞–º–∏–Ω–æ–≤\n"
                "- –°–∏–º–ø—Ç–æ–º—ã –¥–µ—Ñ–∏—Ü–∏—Ç–∞ –≤–∏—Ç–∞–º–∏–Ω–æ–≤\n"
                "- –í–æ–ø—Ä–æ—Å—ã –æ –¥–æ–∑–∏—Ä–æ–≤–∫–µ\n\n"
                "–û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É:"
            )
        elif problem_type == "plant":
            message = (
                "üîç *–ü—Ä–æ–±–ª–µ–º—ã —Å —Ä–∞—Å—Ç–µ–Ω–∏—è–º–∏*\n\n"
                "–û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É, —Å–≤—è–∑–∞–Ω–Ω—É—é —Å –∫–æ–º–Ω–∞—Ç–Ω—ã–º–∏ —Ä–∞—Å—Ç–µ–Ω–∏—è–º–∏. –ù–∞–ø—Ä–∏–º–µ—Ä:\n"
                "- –ñ–µ–ª—Ç–µ—é—Ç –ª–∏—Å—Ç—å—è\n"
                "- –ù–µ —Ü–≤–µ—Ç–µ—Ç —Ä–∞—Å—Ç–µ–Ω–∏–µ\n"
                "- –ü—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–ª–∏–≤–æ–º\n\n"
                "–û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É:"
            )
        else:
            message = (
                "üîç *–ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–ª–µ–º—ã*\n\n"
                "–û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É, –∏ AI –ø–æ–º–æ–∂–µ—Ç –Ω–∞–π—Ç–∏ —Ä–µ—à–µ–Ω–∏–µ:\n\n"
                "–û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É:"
            )
        
        await update.callback.edit_message_text(
            message,
            parse_mode='MarkdownV2',
            reply_markup=cancel_keyboard()
        )
    else:
        if problem_type == "vitamin":
            message = (
                "üîç *–ü—Ä–æ–±–ª–µ–º—ã —Å –≤–∏—Ç–∞–º–∏–Ω–∞–º–∏*\n\n"
                "–û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É, —Å–≤—è–∑–∞–Ω–Ω—É—é —Å –≤–∏—Ç–∞–º–∏–Ω–∞–º–∏ –∏–ª–∏ –º–∏–Ω–µ—Ä–∞–ª–∞–º–∏. –ù–∞–ø—Ä–∏–º–µ—Ä:\n"
                "- –ü–æ–±–æ—á–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã –æ—Ç –ø—Ä–∏–µ–º–∞ –≤–∏—Ç–∞–º–∏–Ω–æ–≤\n"
                "- –°–∏–º–ø—Ç–æ–º—ã –¥–µ—Ñ–∏—Ü–∏—Ç–∞ –≤–∏—Ç–∞–º–∏–Ω–æ–≤\n"
                "- –í–æ–ø—Ä–æ—Å—ã –æ –¥–æ–∑–∏—Ä–æ–≤–∫–µ\n\n"
                "–û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É:"
            )
        elif problem_type == "plant":
            message = (
                "üîç *–ü—Ä–æ–±–ª–µ–º—ã —Å —Ä–∞—Å—Ç–µ–Ω–∏—è–º–∏*\n\n"
                "–û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É, —Å–≤—è–∑–∞–Ω–Ω—É—é —Å –∫–æ–º–Ω–∞—Ç–Ω—ã–º–∏ —Ä–∞—Å—Ç–µ–Ω–∏—è–º–∏. –ù–∞–ø—Ä–∏–º–µ—Ä:\n"
                "- –ñ–µ–ª—Ç–µ—é—Ç –ª–∏—Å—Ç—å—è\n"
                "- –ù–µ —Ü–≤–µ—Ç–µ—Ç —Ä–∞—Å—Ç–µ–Ω–∏–µ\n"
                "- –ü—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–ª–∏–≤–æ–º\n\n"
                "–û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É:"
            )
        else:
            message = (
                "üîç *–ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–ª–µ–º—ã*\n\n"
                "–û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É, –∏ AI –ø–æ–º–æ–∂–µ—Ç –Ω–∞–π—Ç–∏ —Ä–µ—à–µ–Ω–∏–µ:\n\n"
                "–û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É:"
            )
        
        await update.answer(
            message,
            parse_mode='MarkdownV2',
            reply_markup=cancel_keyboard()
        )
    
    return WAITING_FOR_PROBLEM_DESCRIPTION


async def handle_problem_description(update: Message, context: FSMContext, description=None) -> None:
    """Handle problem description"""
    if not description:
        description = update.text
    
    problem_type = context.get('problem_type', 'general')
    
    # Clear state
    if 'state' in context.get():
        del context['state']
    if 'problem_type' in context.get():
        del context['problem_type']
    
    # Send typing action
    await context.bot.send_chat_action(
        chat_id=update.chat.id,
        action='typing'
    )
    
    # Get response from AI
    analysis = await ai_service.identify_problem(description, problem_type)
    
    # Format analysis
    formatted_analysis = format_problem_analysis(analysis, problem_type)
    
    # Clean response to ensure proper formatting
    formatted_analysis = clean_markdown(formatted_analysis)
    
    # Send analysis
    await context.bot.send_message(
        chat_id=update.chat.id,
        text=formatted_analysis,
        parse_mode='MarkdownV2'
    )


async def main() -> None:
    """Start the bot"""
    # Create the Application
    application = Application.builder().token(BOT_TOKEN).build()
    
    # Add command handlers
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("vitamins", show_vitamins_menu))
    application.add_handler(CommandHandler("plants", show_plants_menu))
    application.add_handler(CommandHandler("ai", show_ai_menu))
    application.add_handler(CommandHandler("feedback", start_feedback))
    
    # Add feedback conversation handler
    feedback_conv_handler = ConversationHandler(
        entry_points=[
            CommandHandler("feedback", start_feedback),
            MessageHandler(F.text & ~F.command & F.text.startswith("üìù –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å"), start_feedback)
        ],
        states={
            FEEDBACK: [MessageHandler(F.text & ~F.command, handle_feedback)]
        },
        fallbacks=[CommandHandler("cancel", cancel_feedback)]
    )
    application.add_handler(feedback_conv_handler)
    
    # Add photo handler
    application.add_handler(MessageHandler(F.photo, handle_photo))
    
    # Add callback query handler
    application.add_handler(CallbackQueryHandler(handle_callback_query))
    
    # Add message handler (for text messages)
    application.add_handler(MessageHandler(F.text & ~F.command, handle_text_message))
    
    # Start the bot with polling
    logging.info("Bot started")
    
    # Start the bot
    await application.initialize()
    await application.start()
    await application.updater.start_polling()
    
    logging.info("PLEXY –±–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ! –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.")
    
    # Run the bot until the user presses Ctrl+C
    # Create a future that will be set when a signal is received
    stop_signal = asyncio.Future()
    
    # Windows-compatible signal handling
    def signal_handler(sig, frame):
        logging.info(f"–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {sig}, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –±–æ—Ç–∞...")
        stop_signal.set_result(None)
    
    # Use the standard signal module for Windows compatibility
    import signal
    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)
    
    try:
        await stop_signal
    finally:
        # Stop the bot
        logging.info("–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –±–æ—Ç–∞...")
        await application.stop()
        logging.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")


if __name__ == "__main__":
    asyncio.run(main())