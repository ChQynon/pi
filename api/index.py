from http.server import BaseHTTPRequestHandler
import json
import os
import requests
import base64
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.environ.get('BOT_TOKEN', '8050987714:AAGEeXCsCVqXrLQjrypQDMys49UWPgpf0NE')
TELEGRAM_API = f"https://api.telegram.org/bot{BOT_TOKEN}"
CHUTES_API_TOKEN = os.environ.get('CHUTES_API_TOKEN', 'cpk_7e4ce4743c7545fa8217818d9ca46e55.e1a9c74707105d49ba223a1dc3616256.YSAyEpMPrvBy93xL8IBLo7u1zbSnMWKS')

class handler(BaseHTTPRequestHandler):
    def do_GET(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ GET-–∑–∞–ø—Ä–æ—Å–æ–≤"""
        self.send_response(200)
        self.send_header('Content-type', 'text/html; charset=utf-8')
        self.end_headers()
        self.wfile.write("–ë–æ—Ç –¥–ª—è —É—Ö–æ–¥–∞ –∑–∞ —Ä–∞—Å—Ç–µ–Ω–∏—è–º–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç!".encode('utf-8'))
    
    def do_POST(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ webhook-–∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç Telegram"""
        content_length = int(self.headers['Content-Length'])
        post_data = self.rfile.read(content_length)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –±—ã—Å—Ç—Ä—ã–π –æ—Ç–≤–µ—Ç, —á—Ç–æ–±—ã Telegram –Ω–µ –∂–¥–∞–ª
        self.send_response(200)
        self.send_header('Content-type', 'application/json')
        self.end_headers()
        self.wfile.write(json.dumps({"ok": True}).encode('utf-8'))
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç Telegram
        try:
            update = json.loads(post_data.decode('utf-8'))
            process_update(update)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")
            

def process_update(update):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç Telegram"""
    try:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
        if 'message' in update:
            message = update['message']
            chat_id = message['chat']['id']
            user_id = message['from']['id']
            username = message['from'].get('username', '')
            first_name = message['from'].get('first_name', '')
            
            # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏)
            register_user(user_id, username, first_name)
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ
            if 'photo' in message:
                # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª —Ñ–æ—Ç–æ
                photos = message['photo']
                # –ë–µ—Ä–µ–º —Ñ–æ—Ç–æ —Å —Å–∞–º—ã–º –≤—ã—Å–æ–∫–∏–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ–º
                photo = photos[-1]
                file_id = photo['file_id']
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–æ—Ç–æ —Ä–∞—Å—Ç–µ–Ω–∏—è
                process_plant_photo(chat_id, file_id)
                return
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞
            if 'text' in message:
                text = message['text']
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
                if text.startswith('/'):
                    process_command(chat_id, text, user_id)
                else:
                    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ –ò–ò
                    process_text_query(chat_id, text, user_id)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—Ä–∞—Ç–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤ –æ—Ç –∫–Ω–æ–ø–æ–∫
        elif 'callback_query' in update:
            callback_query = update['callback_query']
            chat_id = callback_query['message']['chat']['id']
            user_id = callback_query['from']['id']
            callback_data = callback_query['data']
            message_id = callback_query['message']['message_id']
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, —á—Ç–æ –ø–æ–ª—É—á–∏–ª–∏ callback
            answer_callback_query(callback_query['id'])
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º callback –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –¥–∞–Ω–Ω—ã—Ö
            if callback_data.startswith('new_plant_care'):
                # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–∞—Å—Ç–µ–Ω–∏—è
                ask_plant_name(chat_id)
            elif callback_data.startswith('vit_'):
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏—Ç–∞–º–∏–Ω–µ
                vitamin_name = callback_data[4:]
                show_vitamin_info(chat_id, vitamin_name)
            else:
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤ callback
                send_message(chat_id, f"–ü–æ–ª—É—á–µ–Ω callback: {callback_data}")
                
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ process_update: {e}")


def process_command(chat_id, command, user_id=None):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞"""
    command = command.lower()
    
    if command.startswith('/start'):
        send_welcome_message(chat_id)
        
    elif command.startswith('/help'):
        send_help_message(chat_id)
        
    elif command.startswith('/care'):
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–∞—Å—Ç–µ–Ω–∏—è –∏–∑ –∫–æ–º–∞–Ω–¥—ã
        parts = command.split(' ', 1)
        if len(parts) > 1:
            plant_name = parts[1].strip()
            send_care_tips(chat_id, plant_name)
        else:
            send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–∞—Å—Ç–µ–Ω–∏—è –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã. –ù–∞–ø—Ä–∏–º–µ—Ä: /care –ú–æ–Ω—Å—Ç–µ—Ä–∞")
    
    elif command.startswith('/vitamins'):
        send_vitamins_list(chat_id)
        
    elif command.startswith('/feedback'):
        ask_for_feedback(chat_id)
        
    else:
        send_message(chat_id, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.")


def send_welcome_message(chat_id):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    text = """üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —É—Ö–æ–¥–∞ –∑–∞ —Ä–∞—Å—Ç–µ–Ω–∏—è–º–∏ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–∏—Ç–∞–º–∏–Ω–∞—Ö.

üå± –Ø –º–æ–≥—É –ø–æ–º–æ—á—å –≤–∞–º —Å:
‚Ä¢ –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ–º —Ä–∞—Å—Ç–µ–Ω–∏–π –ø–æ —Ñ–æ—Ç–æ
‚Ä¢ –°–æ–≤–µ—Ç–∞–º–∏ –ø–æ —É—Ö–æ–¥—É –∑–∞ —Ä–∞—Å—Ç–µ–Ω–∏—è–º–∏
‚Ä¢ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –≤–∏—Ç–∞–º–∏–Ω–∞—Ö
‚Ä¢ –°–æ–≤–µ—Ç–∞–º–∏ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±—ã—Ç–æ–≤—ã—Ö –æ—Ç—Ö–æ–¥–æ–≤ –¥–ª—è —É–¥–æ–±—Ä–µ–Ω–∏—è

–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª, –∫–æ—Ç–æ—Ä—ã–π –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç:"""
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = {
        "inline_keyboard": [
            [
                {"text": "üåø –†–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–∞—Å—Ç–µ–Ω–∏–µ", "callback_data": "recognize_plant"}
            ],
            [
                {"text": "üíß –°–æ–≤–µ—Ç—ã –ø–æ —É—Ö–æ–¥—É", "callback_data": "care_tips"}
            ],
            [
                {"text": "üíä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∏—Ç–∞–º–∏–Ω–∞—Ö", "callback_data": "vitamins_info"}
            ],
            [
                {"text": "‚ôªÔ∏è –û—Ä–≥–∞–Ω–∏—á–µ—Å–∫–∏–µ —É–¥–æ–±—Ä–µ–Ω–∏—è", "callback_data": "organic_fertilizers"}
            ]
        ]
    }
    
    send_message(chat_id, text, reply_markup=keyboard)


def send_help_message(chat_id):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é"""
    text = """üåø *–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*

/start - –ù–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ —Å –±–æ—Ç–æ–º
/help - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥
/care [–Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–∞—Å—Ç–µ–Ω–∏—è] - –ü–æ–ª—É—á–∏—Ç—å —Å–æ–≤–µ—Ç—ã –ø–æ —É—Ö–æ–¥—É –∑–∞ —Ä–∞—Å—Ç–µ–Ω–∏–µ–º
/vitamins - –°–ø–∏—Å–æ–∫ –≤–∏—Ç–∞–º–∏–Ω–æ–≤

üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Ä–∞—Å—Ç–µ–Ω–∏—è, —á—Ç–æ–±—ã —è –µ–≥–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–ª.

üå± –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã care:
/care –ú–æ–Ω—Å—Ç–µ—Ä–∞"""
    
    send_message(chat_id, text, parse_mode="Markdown")


def process_plant_photo(chat_id, file_id):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ñ–æ—Ç–æ —Ä–∞—Å—Ç–µ–Ω–∏—è"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º URL —Ñ–∞–π–ª–∞
        file_info = get_file_info(file_id)
        if not file_info or 'file_path' not in file_info:
            send_message(chat_id, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–æ—Ç–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            return
            
        file_path = file_info['file_path']
        file_url = f"https://api.telegram.org/file/bot{BOT_TOKEN}/{file_path}"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ —Ñ–æ—Ç–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è
        send_message(chat_id, "üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ñ–æ—Ç–æ —Ä–∞—Å—Ç–µ–Ω–∏—è... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.")
        
        # –†–∞—Å–ø–æ–∑–Ω–∞–µ–º —Ä–∞—Å—Ç–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –ò–ò
        recognition_result = recognize_plant_with_ai(file_url)
        
        if not recognition_result.get("recognized", False):
            send_message(chat_id, "üòî –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–∞—Å—Ç–µ–Ω–∏–µ –Ω–∞ —Ñ–æ—Ç–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–¥–µ–ª–∞—Ç—å –±–æ–ª–µ–µ —á–µ—Ç–∫–æ–µ —Ñ–æ—Ç–æ –ø—Ä–∏ —Ö–æ—Ä–æ—à–µ–º –æ—Å–≤–µ—â–µ–Ω–∏–∏.")
            return
            
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
        plant_name = recognition_result.get("name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Ä–∞—Å—Ç–µ–Ω–∏–µ")
        description = recognition_result.get("description", "")
        care_tips = recognition_result.get("care_tips", {})
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞
        text = f"üå± *{plant_name}*\n\n"
        
        if description:
            text += f"{description}\n\n"
            
        if care_tips:
            text += "*–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É—Ö–æ–¥—É:*\n\n"
            
            if "watering" in care_tips:
                text += f"üíß *–ü–æ–ª–∏–≤:* {care_tips['watering']}\n\n"
                
            if "light" in care_tips:
                text += f"‚òÄÔ∏è *–û—Å–≤–µ—â–µ–Ω–∏–µ:* {care_tips['light']}\n\n"
                
            if "temperature" in care_tips:
                text += f"üå°Ô∏è *–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞:* {care_tips['temperature']}\n\n"
                
            if "soil" in care_tips:
                text += f"üå± *–ü–æ—á–≤–∞:* {care_tips['soil']}\n\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
        keyboard = {
            "inline_keyboard": [
                [
                    {"text": "üîç –î—Ä—É–≥–æ–µ —Ä–∞—Å—Ç–µ–Ω–∏–µ", "callback_data": "new_plant_care"},
                    {"text": "üëç –°–ø–∞—Å–∏–±–æ!", "callback_data": f"thanks_care_{plant_name}"}
                ]
            ]
        }
        
        send_message(chat_id, text, parse_mode="Markdown", reply_markup=keyboard)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ: {e}")
        send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


def recognize_plant_with_ai(image_url):
    """–†–∞—Å–ø–æ–∑–Ω–∞–µ—Ç —Ä–∞—Å—Ç–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é –ò–ò"""
    try:
        # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è —ç–º—É–ª—è—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã –ò–ò
        # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–ø—Ä–æ—Å –∫ API –ò–ò
        
        # –ü—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º, —á—Ç–æ –º—ã –≤—Å–µ–≥–¥–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–µ–º –ú–æ–Ω—Å—Ç–µ—Ä—É
        result = {
            "recognized": True,
            "name": "–ú–æ–Ω—Å—Ç–µ—Ä–∞",
            "scientific_name": "Monstera deliciosa",
            "description": "–ö—Ä—É–ø–Ω–æ–µ —Ç—Ä–æ–ø–∏—á–µ—Å–∫–æ–µ —Ä–∞—Å—Ç–µ–Ω–∏–µ —Å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–Ω—ã–º–∏ —Ä–∞–∑—Ä–µ–∑–Ω—ã–º–∏ –ª–∏—Å—Ç—å—è–º–∏, –ø–æ–ø—É–ª—è—Ä–Ω–æ–µ –≤ –¥–æ–º–∞—à–Ω–µ–º –æ–∑–µ–ª–µ–Ω–µ–Ω–∏–∏.",
            "care_tips": {
                "watering": "–†–∞–∑ –≤ –Ω–µ–¥–µ–ª—é, –¥–∞–≤–∞—è –ø–æ—á–≤–µ –ø–æ–¥—Å–æ—Ö–Ω—É—Ç—å –º–µ–∂–¥—É –ø–æ–ª–∏–≤–∞–º–∏",
                "light": "–Ø—Ä–∫–∏–π –Ω–µ–ø—Ä—è–º–æ–π —Å–≤–µ—Ç",
                "temperature": "18-27¬∞C",
                "soil": "–†—ã—Ö–ª–∞—è, –ø–∏—Ç–∞—Ç–µ–ª—å–Ω–∞—è –ø–æ—á–≤–∞ —Å —Ö–æ—Ä–æ—à–∏–º –¥—Ä–µ–Ω–∞–∂–µ–º"
            },
            "common_problems": [
                "–ö–æ—Ä–∏—á–Ω–µ–≤—ã–µ –∫—Ä–∞—è –ª–∏—Å—Ç—å–µ–≤",
                "–ñ–µ–ª—Ç—ã–µ –ª–∏—Å—Ç—å—è",
                "–û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —Ä–∞–∑—Ä–µ–∑–æ–≤ –Ω–∞ –ª–∏—Å—Ç—å—è—Ö"
            ]
        }
        
        return result
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–∏ —Ä–∞—Å—Ç–µ–Ω–∏—è: {e}")
        return {"recognized": False, "error": str(e)}


def process_text_query(chat_id, text, user_id=None):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ –ò–ò"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∑–∞–ø—Ä–æ—Å –≤–æ–ø—Ä–æ—Å–æ–º –æ –≤–∏—Ç–∞–º–∏–Ω–µ
        if "–≤–∏—Ç–∞–º–∏–Ω" in text.lower():
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∏—Ç–∞–º–∏–Ω–∞
            vitamin_name = extract_vitamin_name(text)
            if vitamin_name:
                show_vitamin_info(chat_id, vitamin_name)
                return
                
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∑–∞–ø—Ä–æ—Å –≤–æ–ø—Ä–æ—Å–æ–º –æ —Ä–∞—Å—Ç–µ–Ω–∏–∏
        plant_name = extract_plant_name(text)
        if plant_name:
            send_care_tips(chat_id, plant_name)
            return
            
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–ø –∑–∞–ø—Ä–æ—Å–∞, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ –æ–±—â–∏–π –ò–ò
        ai_response = generate_ai_response(text)
        send_message(chat_id, ai_response)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        send_message(chat_id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.")


def extract_vitamin_name(text):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∏—Ç–∞–º–∏–Ω–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
    # –ü—Ä–æ—Å—Ç–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è - –∏—â–µ–º "–≤–∏—Ç–∞–º–∏–Ω X" –≤ —Ç–µ–∫—Å—Ç–µ
    text = text.lower()
    vitamins = ["A", "B", "C", "D", "E", "K"]
    
    for vitamin in vitamins:
        if f"–≤–∏—Ç–∞–º–∏–Ω {vitamin}" in text:
            return vitamin
            
    return None


def extract_plant_name(text):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–∞—Å—Ç–µ–Ω–∏—è –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
    # –ü—Ä–æ—Å—Ç–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è - –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–∞–∑–≤–∞–Ω–∏–π —Ä–∞—Å—Ç–µ–Ω–∏–π –≤ —Ç–µ–∫—Å—Ç–µ
    plants = ["–º–æ–Ω—Å—Ç–µ—Ä–∞", "—Ñ–∏–∫—É—Å", "—Å—É–∫–∫—É–ª–µ–Ω—Ç", "—Ö–ª–æ—Ä–æ—Ñ–∏—Ç—É–º"]
    
    for plant in plants:
        if plant in text.lower():
            return plant
            
    return None


def generate_ai_response(text):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç —Å –ø–æ–º–æ—â—å—é –ò–ò"""
    # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è —ç–º—É–ª—è—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã –ò–ò
    return f"–Ø –ø–æ–Ω—è–ª –≤–∞—à –≤–æ–ø—Ä–æ—Å: \"{text}\"\n\n–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–µ–π—á–∞—Å —è –Ω–µ –º–æ–≥—É –¥–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç–≤–µ—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã /care, /vitamins –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Ä–∞—Å—Ç–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è."


def send_vitamins_list(chat_id):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–∏—Ç–∞–º–∏–Ω–æ–≤"""
    text = """üíä *–î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∏—Ç–∞–º–∏–Ω—ã:*

–í—ã–±–µ—Ä–∏—Ç–µ –≤–∏—Ç–∞–º–∏–Ω, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ:"""
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≤–∏—Ç–∞–º–∏–Ω–æ–≤
    keyboard = {
        "inline_keyboard": [
            [
                {"text": "–í–∏—Ç–∞–º–∏–Ω A", "callback_data": "vit_A"},
                {"text": "–í–∏—Ç–∞–º–∏–Ω B", "callback_data": "vit_B"},
                {"text": "–í–∏—Ç–∞–º–∏–Ω C", "callback_data": "vit_C"}
            ],
            [
                {"text": "–í–∏—Ç–∞–º–∏–Ω D", "callback_data": "vit_D"},
                {"text": "–í–∏—Ç–∞–º–∏–Ω E", "callback_data": "vit_E"},
                {"text": "–í–∏—Ç–∞–º–∏–Ω K", "callback_data": "vit_K"}
            ]
        ]
    }
    
    send_message(chat_id, text, parse_mode="Markdown", reply_markup=keyboard)


def show_vitamin_info(chat_id, vitamin_name):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏—Ç–∞–º–∏–Ω–µ"""
    # –°–ª–æ–≤–∞—Ä—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –≤–∏—Ç–∞–º–∏–Ω–∞—Ö
    vitamins = {
        "A": {
            "name": "–í–∏—Ç–∞–º–∏–Ω A",
            "description": "–ñ–∏—Ä–æ—Ä–∞—Å—Ç–≤–æ—Ä–∏–º—ã–π –≤–∏—Ç–∞–º–∏–Ω, –≤–∞–∂–Ω—ã–π –¥–ª—è –∑—Ä–µ–Ω–∏—è, –∏–º–º—É–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –∏ —Ä–æ—Å—Ç–∞ –∫–ª–µ—Ç–æ–∫.",
            "sources": "–ú–æ—Ä–∫–æ–≤—å, —Å–ª–∞–¥–∫–∏–π –∫–∞—Ä—Ç–æ—Ñ–µ–ª—å, —à–ø–∏–Ω–∞—Ç, –ø–µ—á–µ–Ω—å, —è–∏—á–Ω—ã–π –∂–µ–ª—Ç–æ–∫",
            "benefits": "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∑—Ä–µ–Ω–∏–µ, –∏–º–º—É–Ω–∏—Ç–µ—Ç –∏ –∑–¥–æ—Ä–æ–≤—å–µ –∫–æ–∂–∏",
            "deficiency": "–£—Ö—É–¥—à–µ–Ω–∏–µ –∑—Ä–µ–Ω–∏—è –≤ —Ç–µ–º–Ω–æ—Ç–µ, —Å—É—Ö–æ—Å—Ç—å –∫–æ–∂–∏, —á–∞—Å—Ç—ã–µ –∏–Ω—Ñ–µ–∫—Ü–∏–∏"
        },
        "C": {
            "name": "–í–∏—Ç–∞–º–∏–Ω C",
            "description": "–ú–æ—â–Ω—ã–π –∞–Ω—Ç–∏–æ–∫—Å–∏–¥–∞–Ω—Ç, –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π –¥–ª—è —Ä–æ—Å—Ç–∞ –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–∫–∞–Ω–µ–π –æ—Ä–≥–∞–Ω–∏–∑–º–∞.",
            "sources": "–¶–∏—Ç—Ä—É—Å–æ–≤—ã–µ, –∫–∏–≤–∏, —à–∏–ø–æ–≤–Ω–∏–∫, —Å–ª–∞–¥–∫–∏–π –ø–µ—Ä–µ—Ü, –±—Ä–æ–∫–∫–æ–ª–∏",
            "benefits": "–£–∫—Ä–µ–ø–ª—è–µ—Ç –∏–º–º—É–Ω–∏—Ç–µ—Ç, —É—Å–∫–æ—Ä—è–µ—Ç –∑–∞–∂–∏–≤–ª–µ–Ω–∏–µ —Ä–∞–Ω, —É–ª—É—á—à–∞–µ—Ç —É—Å–≤–æ–µ–Ω–∏–µ –∂–µ–ª–µ–∑–∞",
            "deficiency": "–ß–∞—Å—Ç—ã–µ –ø—Ä–æ—Å—Ç—É–¥—ã, –º–µ–¥–ª–µ–Ω–Ω–æ–µ –∑–∞–∂–∏–≤–ª–µ–Ω–∏–µ —Ä–∞–Ω, –∫—Ä–æ–≤–æ—Ç–æ—á–∏–≤–æ—Å—Ç—å –¥–µ—Å–µ–Ω"
        },
        "D": {
            "name": "–í–∏—Ç–∞–º–∏–Ω D",
            "description": "–ñ–∏—Ä–æ—Ä–∞—Å—Ç–≤–æ—Ä–∏–º—ã–π –≤–∏—Ç–∞–º–∏–Ω, —Ä–µ–≥—É–ª–∏—Ä—É—é—â–∏–π —É—Å–≤–æ–µ–Ω–∏–µ –∫–∞–ª—å—Ü–∏—è –∏ —Ñ–æ—Å—Ñ–æ—Ä–∞.",
            "sources": "–ñ–∏—Ä–Ω–∞—è —Ä—ã–±–∞, —è–∏—á–Ω—ã–µ –∂–µ–ª—Ç–∫–∏, –≥—Ä–∏–±—ã, –≤—ã—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –≤ –∫–æ–∂–µ –ø–æ–¥ –≤–æ–∑–¥–µ–π—Å—Ç–≤–∏–µ–º —Å–æ–ª–Ω–µ—á–Ω—ã—Ö –ª—É—á–µ–π",
            "benefits": "–£–∫—Ä–µ–ø–ª—è–µ—Ç –∫–æ—Å—Ç–∏ –∏ –∑—É–±—ã, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∏–º–º—É–Ω–∏—Ç–µ—Ç, —Ä–µ–≥—É–ª–∏—Ä—É–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ",
            "deficiency": "–†–∞—Ö–∏—Ç —É –¥–µ—Ç–µ–π, –æ—Å—Ç–µ–æ–ø–æ—Ä–æ–∑ —É –≤–∑—Ä–æ—Å–ª—ã—Ö, –º—ã—à–µ—á–Ω–∞—è —Å–ª–∞–±–æ—Å—Ç—å, –¥–µ–ø—Ä–µ—Å—Å–∏—è"
        }
    }
    
    # –ï—Å–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∏—Ç–∞–º–∏–Ω–µ –µ—Å—Ç—å –≤ —Å–ª–æ–≤–∞—Ä–µ
    if vitamin_name in vitamins:
        vitamin = vitamins[vitamin_name]
        
        text = f"""*{vitamin['name']}*

{vitamin['description']}

*–ò—Å—Ç–æ—á–Ω–∏–∫–∏:*
{vitamin['sources']}

*–ü–æ–ª—å–∑–∞:*
{vitamin['benefits']}

*–ü—Ä–∏–∑–Ω–∞–∫–∏ –¥–µ—Ñ–∏—Ü–∏—Ç–∞:*
{vitamin['deficiency']}"""
        
        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å–ø–∏—Å–∫—É –≤–∏—Ç–∞–º–∏–Ω–æ–≤
        keyboard = {
            "inline_keyboard": [
                [
                    {"text": "‚Üê –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É –≤–∏—Ç–∞–º–∏–Ω–æ–≤", "callback_data": "vitamins_list"}
                ]
            ]
        }
        
        send_message(chat_id, text, parse_mode="Markdown", reply_markup=keyboard)
    else:
        # –ï—Å–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–∏—Ç–∞–º–∏–Ω–µ –Ω–µ—Ç
        send_message(chat_id, f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —É –º–µ–Ω—è –Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–∏—Ç–∞–º–∏–Ω–µ {vitamin_name}. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /vitamins –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–∏—Ç–∞–º–∏–Ω–æ–≤.")


def ask_plant_name(chat_id):
    """–°–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–∞—Å—Ç–µ–Ω–∏—è"""
    send_message(
        chat_id,
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–∞—Å—Ç–µ–Ω–∏—è, –æ –∫–æ—Ç–æ—Ä–æ–º —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å:",
        reply_markup={"force_reply": True}
    )


def ask_for_feedback(chat_id):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –æ—Ç–∑—ã–≤ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    send_message(
        chat_id,
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–∑—ã–≤ –æ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞. –≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –Ω–∞–º —É–ª—É—á—à–∏—Ç—å —Å–µ—Ä–≤–∏—Å:",
        reply_markup={"force_reply": True}
    )


def register_user(user_id, username, first_name):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–∏—Å—Ç–µ–º–µ"""
    # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    logger.info(f"–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {username} (ID: {user_id})")


def send_care_tips(chat_id, plant_name):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–≤–µ—Ç—ã –ø–æ —É—Ö–æ–¥—É –∑–∞ —Ä–∞—Å—Ç–µ–Ω–∏–µ–º"""
    # –°–ª–æ–≤–∞—Ä—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ä–∞—Å—Ç–µ–Ω–∏—è—Ö
    plants = {
        "–º–æ–Ω—Å—Ç–µ—Ä–∞": {
            "name": "–ú–æ–Ω—Å—Ç–µ—Ä–∞",
            "watering": "–†–∞–∑ –≤ –Ω–µ–¥–µ–ª—é, –¥–∞–≤–∞—è –ø–æ—á–≤–µ –ø–æ–¥—Å–æ—Ö–Ω—É—Ç—å –º–µ–∂–¥—É –ø–æ–ª–∏–≤–∞–º–∏",
            "light": "–Ø—Ä–∫–∏–π –Ω–µ–ø—Ä—è–º–æ–π —Å–≤–µ—Ç",
            "temperature": "18-27¬∞C",
            "soil": "–†—ã—Ö–ª–∞—è, –ø–∏—Ç–∞—Ç–µ–ª—å–Ω–∞—è –ø–æ—á–≤–∞ —Å —Ö–æ—Ä–æ—à–∏–º –¥—Ä–µ–Ω–∞–∂–µ–º"
        },
        "—Ñ–∏–∫—É—Å": {
            "name": "–§–∏–∫—É—Å",
            "watering": "–†–∞–∑ –≤ 7-10 –¥–Ω–µ–π, –∫–æ–≥–¥–∞ –≤–µ—Ä—Ö–Ω–∏–π —Å–ª–æ–π –ø–æ—á–≤—ã –ø–æ–¥—Å–æ—Ö–Ω–µ—Ç",
            "light": "–Ø—Ä–∫–∏–π –Ω–µ–ø—Ä—è–º–æ–π —Å–≤–µ—Ç",
            "temperature": "18-24¬∞C",
            "soil": "–õ–µ–≥–∫–∞—è, –ø–∏—Ç–∞—Ç–µ–ª—å–Ω–∞—è –ø–æ—á–≤–∞ —Å —Ö–æ—Ä–æ—à–∏–º –¥—Ä–µ–Ω–∞–∂–µ–º"
        },
        "—Å—É–∫–∫—É–ª–µ–Ω—Ç": {
            "name": "–°—É–∫–∫—É–ª–µ–Ω—Ç",
            "watering": "–†–∞–∑ –≤ 2-3 –Ω–µ–¥–µ–ª–∏, –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø—Ä–æ—Å—É—à–∏–≤–∞—è –ø–æ—á–≤—É –º–µ–∂–¥—É –ø–æ–ª–∏–≤–∞–º–∏",
            "light": "–Ø—Ä–∫–æ–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ, –ø—Ä—è–º–æ–π —Å–æ–ª–Ω–µ—á–Ω—ã–π —Å–≤–µ—Ç",
            "temperature": "18-27¬∞C",
            "soil": "–•–æ—Ä–æ—à–æ –¥—Ä–µ–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è, –ø–µ—Å—á–∞–Ω–∞—è –ø–æ—á–≤–∞"
        },
        "—Ö–ª–æ—Ä–æ—Ñ–∏—Ç—É–º": {
            "name": "–•–ª–æ—Ä–æ—Ñ–∏—Ç—É–º",
            "watering": "–†–∞–∑ –≤ 7-10 –¥–Ω–µ–π, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—è –ø–æ—á–≤—É —Å–ª–µ–≥–∫–∞ –≤–ª–∞–∂–Ω–æ–π",
            "light": "–Ø—Ä–∫–∏–π –Ω–µ–ø—Ä—è–º–æ–π —Å–≤–µ—Ç",
            "temperature": "18-24¬∞C",
            "soil": "–õ–µ–≥–∫–∞—è, —Ö–æ—Ä–æ—à–æ –¥—Ä–µ–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø–æ—á–≤–∞"
        }
    }
    
    # –ü—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É –¥–ª—è –ø–æ–∏—Å–∫–∞
    plant_name_lower = plant_name.lower()
    
    # –ò—â–µ–º —Ä–∞—Å—Ç–µ–Ω–∏–µ –≤ —Å–ª–æ–≤–∞—Ä–µ
    if plant_name_lower in plants:
        plant = plants[plant_name_lower]
        
        text = f"""üå± *{plant['name']}*

üíß *–ü–æ–ª–∏–≤:* {plant['watering']}

‚òÄÔ∏è *–û—Å–≤–µ—â–µ–Ω–∏–µ:* {plant['light']}

üå°Ô∏è *–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞:* {plant['temperature']}

üå± *–ü–æ—á–≤–∞:* {plant['soil']}

üí° *–°–æ–≤–µ—Ç:* –†–µ–≥—É–ª—è—Ä–Ω–æ –æ—Å–º–∞—Ç—Ä–∏–≤–∞–π—Ç–µ —Ä–∞—Å—Ç–µ–Ω–∏–µ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –≤—Ä–µ–¥–∏—Ç–µ–ª–µ–π –∏ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏–π."""
        
        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
        keyboard = {
            "inline_keyboard": [
                [
                    {"text": "üîç –î—Ä—É–≥–æ–µ —Ä–∞—Å—Ç–µ–Ω–∏–µ", "callback_data": "new_plant_care"},
                    {"text": "üëç –°–ø–∞—Å–∏–±–æ!", "callback_data": f"thanks_care_{plant['name']}"}
                ]
            ]
        }
        
        send_message(chat_id, text, parse_mode="Markdown", reply_markup=keyboard)
    else:
        # –ï—Å–ª–∏ —Ä–∞—Å—Ç–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
        text = f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —É –º–µ–Ω—è –Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–∞—Å—Ç–µ–Ω–∏–∏ '{plant_name}'. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Ä–∞—Å—Ç–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è."
        
        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –ø–æ —Ñ–æ—Ç–æ
        keyboard = {
            "inline_keyboard": [
                [
                    {"text": "üì∏ –†–∞—Å–ø–æ–∑–Ω–∞—Ç—å –ø–æ —Ñ–æ—Ç–æ", "callback_data": "recognize_plant"}
                ]
            ]
        }
        
        send_message(chat_id, text, reply_markup=keyboard)


# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Telegram API

def get_file_info(file_id):
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ"""
    url = f"{TELEGRAM_API}/getFile"
    params = {"file_id": file_id}
    
    try:
        response = requests.get(url, params=params)
        result = response.json()
        
        if result.get("ok", False):
            return result["result"]
        else:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∞–π–ª–µ: {result}")
            return None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∞–π–ª–µ: {e}")
        return None


def answer_callback_query(callback_query_id, text=None):
    """–û—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ callback query"""
    url = f"{TELEGRAM_API}/answerCallbackQuery"
    data = {"callback_query_id": callback_query_id}
    
    if text:
        data["text"] = text
        
    try:
        requests.post(url, json=data)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ –Ω–∞ callback query: {e}")


def send_message(chat_id, text, parse_mode=None, reply_markup=None):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —á–µ—Ä–µ–∑ Telegram API"""
    url = f"{TELEGRAM_API}/sendMessage"
    
    data = {
        "chat_id": chat_id,
        "text": text
    }
    
    if parse_mode:
        data["parse_mode"] = parse_mode
        
    if reply_markup:
        data["reply_markup"] = json.dumps(reply_markup)
    
    try:
        response = requests.post(url, json=data)
        return response.json()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        return None 