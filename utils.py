import os
import re
import time
import random
import logging
import aiohttp
import asyncio
import datetime
import traceback
from typing import Dict, List, Union, Optional, Any

from config import TEMP_DIR, MEDIA_DIR

logger = logging.getLogger(__name__)

async def download_image(url: str, save_path: str = None) -> Optional[str]:
    try:
        if not save_path:
            os.makedirs(TEMP_DIR, exist_ok=True)
            filename = f"temp_image_{int(time.time())}_{random.randint(1000, 9999)}.jpg"
            save_path = os.path.join(TEMP_DIR, filename)
        
        async with aiohttp.ClientSession() as session:
            async with session.get(url) as response:
                if response.status != 200:
                    logger.error(f"Failed to download image: {response.status}")
                    return None
                
                with open(save_path, 'wb') as f:
                    f.write(await response.read())
                
                logger.info(f"Image downloaded to {save_path}")
                return save_path
    except Exception as e:
        logger.error(f"Error downloading image: {e}")
        return None

async def fetch_url(url: str) -> Optional[Dict]:
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(url) as response:
                if response.status != 200:
                    logger.error(f"Failed to fetch URL: {response.status}")
                    return None
                
                return await response.json()
    except Exception as e:
        logger.error(f"Error fetching URL: {e}")
        return None

def format_plant_info(plant_data: Dict) -> str:
    if not plant_data:
        return "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–∞—Å—Ç–µ–Ω–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."
    
    info = f"üå± <b>{plant_data.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Ä–∞—Å—Ç–µ–Ω–∏–µ')}</b>\n"
    
    if plant_data.get('scientific_name'):
        info += f"<i>{plant_data['scientific_name']}</i>\n\n"
    else:
        info += "\n"
    
    if plant_data.get('description'):
        info += f"{plant_data['description']}\n\n"
    
    if plant_data.get('type'):
        info += f"<b>–¢–∏–ø:</b> {plant_data['type']}\n"
    
    care_tips = plant_data.get('care_tips', {})
    if isinstance(care_tips, dict) and care_tips:
        info += "\n<b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É—Ö–æ–¥—É:</b>\n"
        for key, value in care_tips.items():
            if key == 'general':
                info += f"{value}\n"
            elif value:
                info += f"‚Ä¢ <b>{key.capitalize()}:</b> {value}\n"
    elif isinstance(care_tips, str) and care_tips:
        info += f"\n<b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É—Ö–æ–¥—É:</b>\n{care_tips}\n"
    
    common_problems = plant_data.get('common_problems', [])
    if common_problems:
        info += "\n<b>–†–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã:</b>\n"
        if isinstance(common_problems, list):
            for problem in common_problems:
                if problem:
                    info += f"‚Ä¢ {problem}\n"
        else:
            info += f"{common_problems}\n"
    
    if plant_data.get('benefits'):
        info += f"\n<b>–ü–æ–ª—å–∑–∞:</b>\n{plant_data['benefits']}\n"
    
    return info

def format_vitamin_info(vitamin_data: Dict) -> str:
    if not vitamin_data:
        return "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∏—Ç–∞–º–∏–Ω–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."
    
    info = f"üíä <b>{vitamin_data.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –≤–∏—Ç–∞–º–∏–Ω')}</b>\n\n"
    
    if vitamin_data.get('description'):
        info += f"{vitamin_data['description']}\n\n"
    
    if vitamin_data.get('benefits'):
        benefits = vitamin_data['benefits'].replace('\n', '\n‚Ä¢ ')
        info += f"<b>–ü–æ–ª—å–∑–∞:</b>\n‚Ä¢ {benefits}\n\n"
    
    if vitamin_data.get('sources'):
        sources = vitamin_data['sources'].replace('\n', '\n‚Ä¢ ')
        info += f"<b>–ù–∞—Ç—É—Ä–∞–ª—å–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏:</b>\n‚Ä¢ {sources}\n\n"
    
    if vitamin_data.get('deficiency'):
        deficiency = vitamin_data['deficiency'].replace('\n', '\n‚Ä¢ ')
        info += f"<b>–ü—Ä–∏–∑–Ω–∞–∫–∏ –¥–µ—Ñ–∏—Ü–∏—Ç–∞:</b>\n‚Ä¢ {deficiency}\n\n"
    
    if vitamin_data.get('daily_intake'):
        info += f"<b>–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è –¥–Ω–µ–≤–Ω–∞—è –¥–æ–∑–∞:</b> {vitamin_data['daily_intake']}\n\n"
    
    if vitamin_data.get('overdose'):
        overdose = vitamin_data['overdose'].replace('\n', '\n‚Ä¢ ')
        info += f"<b>–ü—Ä–∏–∑–Ω–∞–∫–∏ –ø–µ—Ä–µ–¥–æ–∑–∏—Ä–æ–≤–∫–∏:</b>\n‚Ä¢ {overdose}\n"
    
    info += "\n<i>‚ö†Ô∏è –ü—Ä–µ–∂–¥–µ —á–µ–º –ø—Ä–∏–Ω–∏–º–∞—Ç—å –≤–∏—Ç–∞–º–∏–Ω–Ω—ã–µ –¥–æ–±–∞–≤–∫–∏, –ø—Ä–æ–∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä—É–π—Ç–µ—Å—å —Å –≤—Ä–∞—á–æ–º.</i>"
    
    return info

def extract_entities(text: str) -> Dict[str, List[str]]:
    entities = {
        'vitamins': [],
        'plants': [],
        'minerals': [],
        'nutrients': []
    }
    
    vitamin_pattern = r'–≤–∏—Ç–∞–º–∏–Ω[–∞-—è]* [ABCDEK]\d*'
    plant_pattern = r'(–∞–ª–æ—ç|–∫–∞–ª–∞–Ω—Ö–æ—ç|—Ñ–∏–∫—É—Å|–∫–∞–∫—Ç—É—Å|—Å—É–∫–∫—É–ª–µ–Ω—Ç|–æ—Ä—Ö–∏–¥–µ—è|—Ñ–∏–∞–ª–∫–∞|–±–µ–≥–æ–Ω–∏—è|–º–æ–Ω—Å—Ç–µ—Ä–∞|—Ö–ª–æ—Ä–æ—Ñ–∏—Ç—É–º)'
    mineral_pattern = r'(–∫–∞–ª—å—Ü–∏–π|–º–∞–≥–Ω–∏–π|—Ü–∏–Ω–∫|–∂–µ–ª–µ–∑–æ|—Å–µ–ª–µ–Ω|–π–æ–¥|–∫–∞–ª–∏–π)'
    nutrient_pattern = r'(–±–µ–ª–æ–∫|—É–≥–ª–µ–≤–æ–¥|–∂–∏—Ä|–∫–ª–µ—Ç—á–∞—Ç–∫–∞|–∞–Ω—Ç–∏–æ–∫—Å–∏–¥–∞–Ω—Ç)'
    
    vitamins = re.findall(vitamin_pattern, text.lower())
    plants = re.findall(plant_pattern, text.lower())
    minerals = re.findall(mineral_pattern, text.lower())
    nutrients = re.findall(nutrient_pattern, text.lower())
    
    entities['vitamins'] = list(set(vitamins))
    entities['plants'] = list(set(plants))
    entities['minerals'] = list(set(minerals))
    entities['nutrients'] = list(set(nutrients))
    
    return entities

def clean_text(text: str) -> str:
    return re.sub(r'[^\w\s\.\,\-\?\!]', '', text)

def log_user_action(user_id, username, action, details=None):
    try:
        logger.info(f"USER ACTION: {user_id} (@{username}) - {action} - {details or ''}")
    except Exception as e:
        logger.error(f"Error logging user action: {e}")

async def rate_limit(user_state, key, rate_limit_seconds=5):
    current_time = time.time()
    last_time = user_state.get(f"last_{key}_time", 0)
    
    if current_time - last_time < rate_limit_seconds:
        return False
    
    user_state[f"last_{key}_time"] = current_time
    return True

def format_ai_response(response: str) -> str:
    response = response.replace('**', '<b>').replace('__', '<i>')
    response = re.sub(r'\*\*(.+?)\*\*', r'<b>\1</b>', response)
    response = re.sub(r'__(.+?)__', r'<i>\1</i>', response)
    
    response = re.sub(r'\n\n+', '\n\n', response)
    
    section_pattern = r'\*\*([^:]+):\*\*'
    sections = re.findall(section_pattern, response)
    
    for section in sections:
        original = f"**{section}:**"
        replacement = f"<b>{section}:</b>"
        response = response.replace(original, replacement)
    
    return response

def format_plant_tip(plant_tip, detailed=False):
    """Format plant care tip for display"""
    if not plant_tip:
        return "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
    
    if not detailed:
        return f"*{plant_tip['waste_type']}*: {plant_tip['short_description']}"
    
    text = f"*{plant_tip['waste_type']}*\n\n"
    text += f"{plant_tip['description']}\n\n"
    
    if 'benefits' in plant_tip and plant_tip['benefits']:
        text += "*–ü–æ–ª—å–∑–∞ –¥–ª—è —Ä–∞—Å—Ç–µ–Ω–∏–π:*\n"
        for benefit in plant_tip['benefits'].split('\n'):
            if benefit.strip():
                text += f"‚Ä¢ {benefit.strip()}\n"
        text += "\n"
    
    if 'application' in plant_tip and plant_tip['application']:
        text += "*–°–ø–æ—Å–æ–± –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è:*\n"
        for step in plant_tip['application'].split('\n'):
            if step.strip():
                text += f"‚Ä¢ {step.strip()}\n"
        text += "\n"
    
    if 'suitable_plants' in plant_tip and plant_tip['suitable_plants']:
        text += "*–ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è —Ä–∞—Å—Ç–µ–Ω–∏–π:*\n"
        for plant in plant_tip['suitable_plants'].split('\n'):
            if plant.strip():
                text += f"‚Ä¢ {plant.strip()}\n"
        text += "\n"
    
    if 'precautions' in plant_tip and plant_tip['precautions']:
        text += "*–ü—Ä–µ–¥–æ—Å—Ç–µ—Ä–µ–∂–µ–Ω–∏—è:*\n"
        for precaution in plant_tip['precautions'].split('\n'):
            if precaution.strip():
                text += f"‚Ä¢ {precaution.strip()}\n"
        text += "\n"
    
    return text

def format_faq(faq_id):
    """Return formatted FAQ text based on ID"""
    faqs = {
        "about": {
            "title": "–û –±–æ—Ç–µ",
            "text": (
                "–≠—Ç–æ—Ç –±–æ—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–∏—Ç–∞–º–∏–Ω–∞—Ö, –º–∏–Ω–µ—Ä–∞–ª–∞—Ö –∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ "
                "–±—ã—Ç–æ–≤—ã—Ö –æ—Ç—Ö–æ–¥–æ–≤ –¥–ª—è —É—Ö–æ–¥–∞ –∑–∞ –∫–æ–º–Ω–∞—Ç–Ω—ã–º–∏ —Ä–∞—Å—Ç–µ–Ω–∏—è–º–∏.\n\n"
                "–§—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞:\n"
                "‚Ä¢ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∏—Ç–∞–º–∏–Ω–∞—Ö –∏ –º–∏–Ω–µ—Ä–∞–ª–∞—Ö\n"
                "‚Ä¢ –°–æ–≤–µ—Ç—ã –ø–æ —É—Ö–æ–¥—É –∑–∞ —Ä–∞—Å—Ç–µ–Ω–∏—è–º–∏\n"
                "‚Ä¢ AI –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –ø–æ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–º –≤–æ–ø—Ä–æ—Å–∞–º\n"
                "‚Ä¢ –ê–Ω–∞–ª–∏–∑ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π —Ä–∞—Å—Ç–µ–Ω–∏–π\n"
                "‚Ä¢ –†–µ—à–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º —Å –≤–∏—Ç–∞–º–∏–Ω–∞–º–∏ –∏ —Ä–∞—Å—Ç–µ–Ω–∏—è–º–∏\n\n"
                "–ë–æ—Ç –ø–æ—Å—Ç–æ—è–Ω–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –Ω–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏."
            )
        },
        "how_to_search": {
            "title": "–ö–∞–∫ –∏—Å–∫–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é",
            "text": (
                "–°—É—â–µ—Å—Ç–≤—É–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–ø–æ—Å–æ–±–æ–≤ –Ω–∞–π—Ç–∏ –Ω—É–∂–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é:\n\n"
                "1. –í—ã–±–µ—Ä–∏—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Ä–∞–∑–¥–µ–ª –≤ –º–µ–Ω—é (–í–∏—Ç–∞–º–∏–Ω—ã, –†–∞—Å—Ç–µ–Ω–∏—è –∏ —Ç.–¥.)\n\n"
                "2. –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –≤ —á–∞—Ç, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n"
                "   ‚Ä¢ '–í–∏—Ç–∞–º–∏–Ω D'\n"
                "   ‚Ä¢ '–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —è–∏—á–Ω—É—é —Å–∫–æ—Ä–ª—É–ø—É –¥–ª—è —Ä–∞—Å—Ç–µ–Ω–∏–π'\n\n"
                "3. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ AI –ö–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞ –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤\n\n"
                "4. –í —Ä–∞–∑–¥–µ–ª–µ '–ü—Ä–æ–±–ª–µ–º—ã –∏ —Ä–µ—à–µ–Ω–∏—è' –æ–ø–∏—à–∏—Ç–µ —Å–≤–æ—é –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –ø—Ä–æ–±–ª–µ–º—É\n\n"
                "–ü–æ–º–Ω–∏—Ç–µ, —á—Ç–æ –º–æ–∂–Ω–æ –≤—Å–µ–≥–¥–∞ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é, –Ω–∞–∂–∞–≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É."
            )
        },
        "sources": {
            "title": "–ò—Å—Ç–æ—á–Ω–∏–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏",
            "text": (
                "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤ —ç—Ç–æ–º –±–æ—Ç–µ –æ—Å–Ω–æ–≤–∞–Ω–∞ –Ω–∞ –∞–≤—Ç–æ—Ä–∏—Ç–µ—Ç–Ω—ã—Ö –Ω–∞—É—á–Ω—ã—Ö –∏ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–∞—Ö:\n\n"
                "‚Ä¢ –ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏ –∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –æ –≤–∏—Ç–∞–º–∏–Ω–∞—Ö –∏ –º–∏–Ω–µ—Ä–∞–ª–∞—Ö\n\n"
                "‚Ä¢ –ù–∞—É—á–Ω—ã–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ –∞–≥—Ä–æ–Ω–æ–º–∏–∏ –∏ —É—Ö–æ–¥—É –∑–∞ —Ä–∞—Å—Ç–µ–Ω–∏—è–º–∏\n\n"
                "‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã—Ö —Å–∞–¥–æ–≤–æ–¥–æ–≤ –∏ –±–∏–æ–ª–æ–≥–æ–≤\n\n"
                "‚Ä¢ AI –∞–ª–≥–æ—Ä–∏—Ç–º—ã, –æ–±—É—á–µ–Ω–Ω—ã–µ –Ω–∞ –æ–±—à–∏—Ä–Ω—ã—Ö –Ω–∞—É—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö\n\n"
                "–í—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Ä–µ–≥—É–ª—è—Ä–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –∞–∫—Ç—É–∞–ª—å–Ω—ã–º –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è–º."
            )
        },
        "ai_features": {
            "title": "–û–± AI –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö",
            "text": (
                "–ë–æ—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ AI —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –¥–ª—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤:\n\n"
                "1. *–û–±—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã* - –∑–∞–¥–∞–≤–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å—ã –Ω–∞ –ª—é–±—ã–µ —Ç–µ–º—ã, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –≤–∏—Ç–∞–º–∏–Ω–∞–º–∏ –∏ —Ä–∞—Å—Ç–µ–Ω–∏—è–º–∏\n\n"
                "2. *–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –≤–∏—Ç–∞–º–∏–Ω–æ–≤* - –ø–æ–ª—É—á–∏—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø—Ä–∏–µ–º—É –≤–∏—Ç–∞–º–∏–Ω–æ–≤\n\n"
                "3. *–ê–Ω–∞–ª–∏–∑ —Ä–∞—Å—Ç–µ–Ω–∏—è* - –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –≤–∞—à–µ–≥–æ —Ä–∞—Å—Ç–µ–Ω–∏—è –¥–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏ —Å–æ–≤–µ—Ç–æ–≤ –ø–æ —É—Ö–æ–¥—É\n\n"
                "4. *–†–µ—à–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º* - –æ–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É, –∏ AI –ø–æ–º–æ–∂–µ—Ç –Ω–∞–π—Ç–∏ —Ä–µ—à–µ–Ω–∏–µ\n\n"
                "5. *–ê–∫—Ç—É–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è* - –∑–∞–ø—Ä–æ—Å–∏—Ç–µ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–∞—É—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–µ–π —Ç–µ–º–µ"
            )
        },
        "problem_solving": {
            "title": "–û —Ä–µ—à–µ–Ω–∏–∏ –ø—Ä–æ–±–ª–µ–º",
            "text": (
                "–ë–æ—Ç –ø–æ–º–æ–∂–µ—Ç —Ä–µ—à–∏—Ç—å —Ç–∏–ø–∏—á–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã —Å –≤–∏—Ç–∞–º–∏–Ω–∞–º–∏ –∏ —Ä–∞—Å—Ç–µ–Ω–∏—è–º–∏:\n\n"
                "1. –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª *–ü—Ä–æ–±–ª–µ–º—ã –∏ —Ä–µ—à–µ–Ω–∏—è* –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é\n\n"
                "2. –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø—Ä–æ–±–ª–µ–º—ã –∏–ª–∏ –æ–ø–∏—à–∏—Ç–µ –µ–µ —Å–≤–æ–∏–º–∏ —Å–ª–æ–≤–∞–º–∏\n\n"
                "3. –ë–æ—Ç –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø—Ä–æ–±–ª–µ–º—É, –ø—Ä–µ–¥–ª–æ–∂–∏—Ç –ø—Ä–∏—á–∏–Ω—ã –∏ —Ä–µ—à–µ–Ω–∏—è\n\n"
                "–î–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å—Ç–∞—Ä–∞–π—Ç–µ—Å—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ–¥—Ä–æ–±–Ω–æ –æ–ø–∏—Å–∞—Ç—å –ø—Ä–æ–±–ª–µ–º—É."
            )
        }
    }
    
    if faq_id not in faqs:
        return None
    
    faq = faqs[faq_id]
    return f"*{faq['title']}*\n\n{faq['text']}"

def is_vitamin_query(text):
    """Check if text likely contains a vitamin query"""
    text = text.lower()
    vitamin_keywords = ['–≤–∏—Ç–∞–º–∏–Ω', '–º–∏–Ω–µ—Ä–∞–ª', '–∫–∞–ª—å—Ü–∏–π', '–∂–µ–ª–µ–∑–æ', '–º–∞–≥–Ω–∏–π', 
                        '—Ü–∏–Ω–∫', '–∫–∞–ª–∏–π', '–Ω–∞—Ç—Ä–∏–π', '—Ñ–æ—Å—Ñ–æ—Ä', '–π–æ–¥', '—Å–µ–ª–µ–Ω']
    return any(keyword in text for keyword in vitamin_keywords)

def is_plant_query(text):
    """Check if text likely contains a plant care query"""
    text = text.lower()
    plant_keywords = ['—Ä–∞—Å—Ç–µ–Ω–∏–µ', '—Ü–≤–µ—Ç–æ–∫', '—É—Ö–æ–¥', '–ø–æ–ª–∏–≤', '—É–¥–æ–±—Ä–µ–Ω–∏–µ', '–ø–æ—á–≤–∞',
                     '—Å–∫–æ—Ä–ª—É–ø–∞', '–∫–æ–∂—É—Ä–∞', '–≥—É—â–∞', '–∑–∞–≤–∞—Ä–∫–∞', '–∫–æ–º–ø–æ—Å—Ç']
    return any(keyword in text for keyword in plant_keywords)

def get_file_url(file_path, bot_token):
    """Get full file URL from file path"""
    return f"https://api.telegram.org/file/bot{bot_token}/{file_path}"

def is_health_query(text):
    """Check if text likely contains a health query"""
    text = text.lower()
    health_keywords = ['–∑–¥–æ—Ä–æ–≤—å–µ', '—Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏–µ', '—Å–æ–Ω', '—É—Å—Ç–∞–ª–æ—Å—Ç—å', '–±–æ–ª–µ–∑–Ω—å', 
                      '—Å–∏–º–ø—Ç–æ–º', '–ª–µ—á–µ–Ω–∏–µ', '–ø—Ä–æ—Ñ–∏–ª–∞–∫—Ç–∏–∫–∞', '–∏–º–º—É–Ω–∏—Ç–µ—Ç']
    return any(keyword in text for keyword in health_keywords)

def is_ai_query(text):
    """Check if text likely contains an AI query"""
    text = text.lower()
    ai_keywords = ['ai', '–∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç', '–∞–Ω–∞–ª–∏–∑', '–ø–æ–º–æ–≥–∏', '–ø–æ—Å–æ–≤–µ—Ç—É–π', 
                  '—á—Ç–æ –¥–µ–ª–∞—Ç—å', '–∫–∞–∫ –±—ã—Ç—å', '–æ–±—ä—è—Å–Ω–∏', '—Ä–∞—Å—Å–∫–∞–∂–∏', '–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç']
    return any(keyword in text for keyword in ai_keywords)

def format_problem_analysis(analysis, problem_type):
    """Format problem analysis for display"""
    # For simple responses, just return the analysis as is
    if not analysis.startswith("**"):
        return analysis
    
    # For structured responses, add a header based on problem type
    if problem_type == "vitamin":
        header = "üîç *–ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–ª–µ–º—ã —Å –≤–∏—Ç–∞–º–∏–Ω–∞–º–∏*\n\n"
    elif problem_type == "plant":
        header = "üîç *–ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–ª–µ–º—ã —Å —Ä–∞—Å—Ç–µ–Ω–∏–µ–º*\n\n"
    else:
        header = "üîç *–ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–ª–µ–º—ã*\n\n"
    
    # Replace markdown formatting for Telegram
    formatted_analysis = analysis.replace("**", "*")
    
    return header + formatted_analysis

def clean_markdown(text):
    """Clean markdown formatting from text while preserving Telegram markdown
    
    Args:
        text (str): Text with potentially incorrect markdown
        
    Returns:
        str: Cleaned text with proper Telegram markdown
    """
    if not text:
        return text
        
    # Remove or replace problematic markdown
    text = text.replace("###", "")
    text = text.replace("##", "")
    text = text.replace("**", "*")  # Convert bold to Telegram format
    
    # Ensure there are even number of asterisks for proper Telegram formatting
    asterisk_count = text.count("*")
    if asterisk_count % 2 != 0:
        # Find the last asterisk and remove it if unmatched
        last_pos = text.rfind("*")
        if last_pos >= 0:
            text = text[:last_pos] + text[last_pos+1:]
            
    return text 